컬렉션 프레임워크
	배열은 자료형이 같아야 하고, 또 크기가 고정되어 있어
	데어터를 추가하거나 삭제할 대 코드가 번거롭다.
	이때 동적인 배열 컬렉션 프레임워크를 사용하면 
	다양한 자료형을 담을 수 있고 데이터를 담는 만큼 
	배열의 크기가 자동으로 조절 된다.
	
1. Set	:중복을 허용 하지 않음
	-HashSet 		: 데이터의 순서를 유지 하지 않음.
	-LikedHashSet 	: 데이터의 순서를 유지
	-TreeSet		: 데이터를 정렬(단, 자료형이 같아야 함)		

2. List	:중복을 허용하고 순서도 유지
	ArrayList, LinkedList 둘 다 사용법은 동일하지만
	ArrayList는 마치 배열처럼 연속된 메모리로 확보되기 대문에
	배열의 중간에 데이터를 추가하거나 삭제하면 가비지가 만들어지고 또 데이터 수만큼
	이동해야하기 때문에 성능이 떨어 질 수 있어요.
	이런 경우에는 LinkedList를 사용하는 것이 효율적입니다.

3. Map	:인덱스 대신 Key에 의해 데이터에 접근하는 방식
	-HashMap		: 순서를 유지X
	-LinkedHashMap	: 순서를 유지O
	-TreeMap		: 데이터를 정렬.
	


<< ArrayList >>
마치 배열과 같은 메모리 구조
(연속된 메모리확보)
배열의 중간에 새로운 데이터를 추가 하거나 삭제하면
새로운 메모리를 확보하여 가비지도 생성되 데이터를 모두 이동
시켜야 하므로 성능이 떨어진다.

<< LinkedList >>
(value) + (next)
연속된 메모리가 아니라
요소 하나하나가 데이터를 표현하는 속성과
다음에 요소가 있는 주소를 가지고 있다.

//어떤 사람의 이름, 주소, 전화번호를 리스트에 담아 보자.'
		List<String> data = new ArrayList<String>();
		
		data.add("홍길동");
		data.add("서울시 종로구 종로2가");
		data.add("010-1111-1111");
		
		//위의 코드의 경우 이 사람의 전화번호를 가지고 오려면
		//전화번호가 1번째 인덱스라는 것을 알아야 한다.
		//이것은 때에 따라 헛갈릴 수 있다.
		//각 요소의 데이터를 어떤 의미를 가지고 있을때
		//인덱스로 접근하는 방식 보다는 의미있는 Key로 데이터에 접근
		//하도록 하는 방법이 더 직관적이다.
		//이럴때 사용하는 것이 Map이다.
		
--------------------------------------------------------------------------------

<< 파일입출력 >>
프로그램 실행한 결과를 화면에 출력하면
컴퓨터가 종료되면 그 결과를 사라지게 된다.(휘발성)
만약에 프로그램 실행한 결과를 영구적으로 보관(저장) 하려면
파일을 이용한다.

또, 프로그램 실행에 필요한 데이터를
키보드부터 입력 받지 않고
파일로 부터 입력 받을 수도 있다.

입출력은 컴퓨터(메모리) 입장에서 "입력"이고 "출력"이다.
프로그램 실행한 결과 즉 메모리의 내용을 팡일로 "출력"
파일로 부터 컴퓨터 메모리로 읽어 들이기 "입력"

자바는 이러한 "입출력"을 위하여
java.io 패키지에 관련 클래스들을 만들어 두었다.