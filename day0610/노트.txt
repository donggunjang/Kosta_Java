프로그램 실행 결과를 출력
==>	컴퓨터 화면		: 휘발성
==>	파일 			: 영구저장, 동시에 최신의 정보 공유 X
==> 데이터베이스	: 영구저장, 동시에 최신의 정보 공유 O
데이터베이스
==> 자료를 쌓아 놓은 더미

------------------------------------------------------------------------------------------------
데이터베이스관리시스템(DataBase Management System)
==> 데이터베이스관리 시스템을 통하여 테이터베이스를 사용한다.

------------------------------------------------------------------------------------------------

데이터베이스 관리시스템(DBMS)
Oracle, MySql, MsSql,mariaDB ...

------------------------------------------------------------------------------------------------

데이터베이스 종류
	관계형 데이터베이스	<--- 대체적으로 관계형 데이터베이스를 많이 사용한다.
	객체 데이터베이스
	..
	
------------------------------------------------------------------------------------------------

<<관계형 데이터베이스>>
우리가 학습하는 오라클은 "관계형 데이터베이스"에 해당한다.
관계형 데이터베이스는 기업의 정보구조를 여러개의 테이블로 나타낸다.
각 테이블은 행과 열로 구성되며 
각각의 테이블은 서로 관계가 있도록 만들어진다.
관계가 있다는 말은 두개의 테이블에 공통으로 들어가는 컬럼(속성)이 있는 것이다.

예를들어 부서관리시스템에서
부서의 정보를 저장하기 위한
부서테이블의 속성으로 부서번호, 부서명, 부서위치가 있다고 하자.

부서
부서번호	부서명	부서위치
10		기획팀	판교
20		개발팀	광화문
30		총무팀	광화문

이 부서에 소속된 사원테이블의 속성으로는
사원번호, 사원명, 급여 그리고 어느 부서에 속해 있는지 부서번호가 있어야 한다.

사원
사원번호	사원명	급여		부서번호
1000	손흥민	160000	10
1001	이강인	70000	20

이와 같이 두개의 테이블에 부서번호 라는 속성이 공통으로 들어가 있다.
이것을 우리는 관계에 있다라고 말한다.

이론적으로 관계의 종류는 많이 있지만
우리가 학습할 관계는 "주종관계(부모자식관계)" 입니다.

두개의 테이블에
데이터가 먼저 들어가야 하는 것을 부모로 본다.

------------------------------------------------------------------------------------------------

			<<데이터베이스의 명령어의 종류>>
			
1. 데이터 정의어(Data Definition Language)		DDL
	- 테이블이나 개체를 생성, 수정, 삭제하는 명령
	- CREATE, ALTER, DROP
	
2. 데이터 제어어(Data Control Language)			DCL
	- 사용자를 생성, 삭제, 권한부여, 권한취소
	- GRANT, REVOKE
	
3. 데이터 조작어(Data Manipulation Language)	DML
	- 레코드를 추가, 수정, 삭제, 조회
	- INSERT, UPDATE, DELETE, SELECT
	
------------------------------------------------------------------------------------------------

서점관리 시스템을 위한 3개의 테이블 생성
	
도서(도서번호, 도서명, 가격, 출판사)
고객(고객번호, 고객명, 주소, 전화)
주문(주문번호, 고객번호, 도서번호, 주문가격, 주문일)

book(bookid*, bookname, price, publisher)
customer(custid*, name, address, phone)
orders(orderid*, custid+, bookid+, saleprice, orderdate)

* PRIMERY KEY
+ FOREIGN KEY

book 테이블은 bookid를 주식별자(primary key)로 설정하여 다른레코드와 구별하도록 한다.
customer테이블은 custid를 주식별자(primary key)로 설정하여 다른레코드와 구별하도록 한다.
orders 테이블은 orderid를 주식별자(primary key)로 설정하여 다른레코드와 구별하도록 한다.

그리고 orders 테이블의 custid는 반드시 customer테이블에 존재하는 custid가 되도록 설정
(참조키 설정 - FOREIGN KEY)

또, orders 테이블의 bookid는 반드시 book 테이블에 존재하는 bookid가 되도록 설정
(참조키 설정 - FOREIGN KEY)

<< PRIMARY KEY >>
테이블을 만들 때 다른 레코드와 구별할 수 있는 속성이 필요한데
이것을 "주 식별자" 라고 하며 주식별자를 설정하기 위하여 PRIMARY KEY를 사용한다.

<< FOREIGN KEY >> 
두개의 테이블을 관게로 설정 할 때
자식 테이블의 어떠한 속성을 부모의 주식별ㅈ를 참조하도록 하기 위하여 사용

------------------------------------------------------------------------------------------------
 
 <<테이블 생성>>
  
CREATE TABLE book(
	bookid NUMBER PRIMARY KEY,
	bookname VARCHAR2(50),
	price NUMBER,
	pubhlisher VARCHAR2(50)
	
 <<테이블에 데이터 추가>>
INSERT INTO book VALUES(1, '축구의 역사', 7000, '굿스포츠');
INSERT INTO book(bookid, bookname, pubhlisher, price) VALUES(2, '축구잘아는사람', '나무수',13000);
INSERT INTO book(bookid, bookname, pubhlisher, price) VALUES(3, '세계의 벽', '손웅정',20000);
INSERT INTO book(bookid, bookname, pubhlisher, price) VALUES(4, '그렇게 안높아', '손흥민',24000);
INSERT INTO book(bookid, bookname, pubhlisher, price) VALUES(5, '남자는 뭐', '자신감',10000);
INSERT INTO book(bookid, bookname, pubhlisher, price) VALUES(6, '골프 바이블', '탈골스윙',19000);
INSERT INTO book(bookid, bookname, pubhlisher, price) VALUES(7, '골프 교본', '탈골스윙',33000);
INSERT INTO book(bookid, bookname, pubhlisher, price) VALUES(8, 'PGA프로', '로리 맥길로이',30000);
INSERT INTO book(bookid, bookname, pubhlisher, price) VALUES(9, '최강야구', '김성근',17500);
INSERT INTO book(bookid, bookname, pubhlisher, price) VALUES(10, '야구는만화다', '오타니쇼헤이',19800);
)

1행에 오류:
ORA-12899: "C##MDANG"."CUSTOMER"."ADDRESS" 열에 대한 값이 너무 큼(실제: 27,
최대값: 20)
ALTER TABLE customer MODIFY address VARCHAR2(20);

==> 한글은 한글자 표현하기 위해서 VARCHAR2(3)
==> 입력하려는 '맨체스터유나이티드'는 VARCHAR2(20)으로는 부족하다는 오류

 <<테이블 생성>>
CREATE TABLE customer(
	custid NUMBER PRIMARY KEY,
	name VARCHAR2(20),
	address VARCHAR2(20),
	phone VARCHAR(20)
)

 <<테이블에 데이터 추가>>
INSERT INTO customer VALUES(1, '박지성', '맨유', '000-1111-1231');
INSERT INTO customer VALUES(2, '손흥민', '토트넘', '000-2222-8465');
INSERT INTO customer VALUES(3, '이강인', 'PSG', '000-0003-3333');
INSERT INTO customer VALUES(4, '로리 맥길로이', 'PGA', '000-0004-4454');
INSERT INTO customer VALUES(5, '박세리', 'LPGA', '000-5005-5566');
 
 <<테이블 생성>>
CREATE TABLE orders(
	orderid NUMBER PRIMARY KEY,
	custid NUMBER REFERENCES customer(custid),
	bookid NUMBER REFERENCES book(bookid), 
	saleprice NUMBER, 
	orderdate DATE
)

<<테이블에 데이터 추가>>
박지성이, 축구의 역사를 6000원에 오늘 날짜에 주문 했다.

INSERT INTO orders VALUES(1, 1, 1, 6000, '2024/6/10');
INSERT INTO orders VALUES(2, 1, 3, 19000, '2024/5/16');
INSERT INTO orders VALUES(3, 2, 2, 13000, '2024/6/7');
INSERT INTO orders VALUES(4, 3, 4, 23000, '2024/6/5');
INSERT INTO orders VALUES(5, 4, 5, 10000, '2024/5/18');
INSERT INTO orders VALUES(6, 1, 6, 18000, '2024/5/6');
INSERT INTO orders VALUES(7, 4, 7, 25000, '2024/5/27');
INSERT INTO orders VALUES(8, 5, 8, 30000, '2024/6/6');
INSERT INTO orders VALUES(9, 5, 9, 15000, '2024/6/10');
INSERT INTO orders VALUES(10, 4, 10, 17800, '2024/6/9');

------------------------------------------------------------------------------------------------
<< 데이터베이스 명령어 >>
1. DDL
2. DCL
3. DML	<---

SQL(Structured Query Language - 구조적 질의 언어)
시퀄

------------------------------------------------------------------------------------------------
DML(데이터 조작어)

INSERT	레코드의 추가 
UPDATE	레코드의 수정
DELETE	레코드의 삭제
SELECT	레코드의 조회	<----

------------------------------------------------------------------------------------------------

<< 데이터 조회 하기 >> 
SELECT 컬럼이름(들) 
FROM 테이블이름(들)
[WHERE 조건식]

연습1) 모든 '고객'의 주소를 조회
SELECT address
FROM customer;

연습2) '박세리' 고객의 주소를 조회
SELECT address
FROM customer
WHERE name = '박세리';

연습3) '로리 맥길로이'에서 출간하는 도서의 도서명과 가격을 조회
SELECT bookname, price
FROM book
where pubhlisher = '로리 맥길로이';

연습4) '로리 맥길로이'에서 출간하는 도서의 도서번호,도서명,가격,출판사를 조회
SELECT *FROM book WHERE pubhlisher = '로리 맥길로이';

연습) 모든 출판사 목록 출력
SELECT pubhlisher FROM book;


==> 어떤 종류의 출판사가 있는지 조회 하기 위해 중복을 제거

<< 중복 제거 ==> DISTINCT >>
SELECT DISTINCT pubhlisher FROM book;

------------------------------------------------------------------------------------------------

<< WHERE 절에 사용할 수 있는 연산자 >>

비교 연산자		: >, <, >=, <=, =, <>
논리 연산자		: and, or
집합 연산자		: in, not in, 
범위 연산자		: between a and b
null 연산자	: is null, is not null
패턴 연산자		: like

연습) 가격이 20000원 이상인 도서의 목록을 출력
SELECT *FROM book WHERE price >= 20000;

연습) 출판사가 '굿스포츠'가 아닌 모든 도서목록을 출력
SELECT *FROM book WHERE pubhlisher NOT IN '굿스포츠';
SELECT *FROM book WHERE pubhlisher <> '굿스포츠';

연습) 2024년 6월 10일 주문한 도서번호와 고객번호를 출력
SELECT bookid, custid FROM orders WHERE orderdate = '2024/06/10';

연습) '탈골스윙'에서 출간하는 도서중에 가격이 20000원 이상인
		도서번호, 도서명 출력
SELECT bookid, bookname FROM book WHERE pubhlisher = '탈골스윙' and price >= 20000;
		
연습) '탈골스윙' 이나 '대한미디어'에서 출간하는 도서의 도서번호, 도서명, 출판사명을 출력
SELECT bookid, bookname FROM book WHERE pubhlisher = '탈골스윙' or pubhlisher = '대한미디어';
SELECT bookid, bookname FROM book WHERE pubhlisher in ('탈골스윙','대한미디어');

연습) '탈골스윙'도 아니고 '굿스포츠' 도 아닌 출판사의 도서번호, 도서명, 출판사명을 출력
SELECT bookid, bookname FROM book WHERE pubhlisher NOT IN ('탈골스윙', '굿스포츠');

연습) '탈골스윙'이나 '굿스포츠'에서 출간하는 도서중에 가격이 20000원 이상인
		도서번호, 도서명, 출판사명을 출력
SELECT bookid, bookname, pubhlisher FROM book WHERE price >= 20000;
		
연습) 가격이 10000원 이상 20000원 이하인 도서의 도서번호, 도서명, 출판사명, 가격을 검색
SELECT bookid, bookname, pubhlisher, price FROM book WHERE price BETWEEN 10000 and 20000;

연습) '탈골스윙'이나 '굿스포츠'에서 출간하는 도서중에
		가격이 10000원 이상 30000원 이하인 도서의 정보를 출력
SELECT *FROM book WHERE pubhlisher in ('탈골스윙', '굿스포츠') and price BETWEEN 10000 and 30000; 

연습) 전화번호가 NULL인 고객의 이름, 주소를 출력
SELECT name, address FROM customer WHERE phone is null;

연습) 전화번호가 NULL이 아닌 고객의 정보를 출력
 

