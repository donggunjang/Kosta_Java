package com.kosta.exam03;

class Book{
	private String title;
	private String author;
	
	public void setTitle(String t) {
		title = t;
		return;
	}
	
	public void setAuthor(String a) {
		author = a;
	}
	
	public String getTitle() {
		return title;
	}
	
	public String getAthor() {
		return author;
	}
}
public class BookTest {
	public static void main(String[] args) {
		Book b1 = new Book();
		b1.setTitle("재미있는 자바");
		b1.setAuthor("홍길동");
		
		//책 제목,저자 출력
		System.out.printf("제목: %s\t",b1.getTitle());
		System.out.printf("저자: %s\n",b1.getAthor());
	}
}
26번 행에ㅔ서 Book객체를 생성하고 
27,28번행에서 도서명과 저자를 초기화 하고, 처음부터 책이름과 
저자가 정해진 경우라면 개개체를 생성하고 동시에 맴버변수들의 값을
초기화 할 수 있다.
이러한 목적으로 사용하는 특수한 메소드를 "생성자'라고 한다.

<<생성자 만드는 방법>>
클래스이름과 동일한 이름으로 메소드를 만들어 주고
생성자는 일반 메소드처럼 호출문에 의해 동작하는 것이 아니기 때문에
리턴타입을 따로 적지 않는다. (Void XX)
------------------------------------------------------------------------------------
생성자의 매개변수 이름을 의미 있는 이름으로 정해주다 보면
맴버변수 이름과 동일하게 된다.
이때 생성자Body안에서는 매개변수가 우선순위가 높아서
매개변수 title에 매개변수 title을 저장하는 의미없는 동작을 하게되고
맴버변수에는 초기화가 되지 않는다.

public Book(String title, String author) {
		System.out.println("생성자 동작");
		title = title; 
		author = author;
	}// 생성자
	
--------------------------------------------------------------------------------------
<< this >>
생성자나 메소드의 매개변수이름을 의미있는 이름으로 정해주다 보면  맴버변수명과 겹치게 되는데
이때 맴버 자신을 구별할 목적으로 this를 사용.

--------------------------------------------------------------------------------------
this	==> 생성자나 메소드의 매개변수이름을 의미있는 이름으로 정해주다 보면 맴버변수명과 겹치게된다.
			맴버자신을 구별할 목적으로 사용된다.
			
this()	==> 생성자가 중복정의 되어 있을때에 생성자 안에서 또 다른 생성자를 동작시키고자 할 때에
			반드시 생성자의 첫번재 문장에 와야 한다.
			
--------------------------------------------------------------------------------------

<< 기본생성자 >>
매개변수를 하나도 갖지 않는 생성자를 말하며
사용자가 생성자를 만들지 않으면 자바가 "기본생성자"를 제공 해 주며
각각의 자료형에 따라 초기화 해 준다.
	참조자료형은 nuul
	int 0, double 0.0, boolean false,...
	
그러나, 사용자가 생성자를 한개라도 만들기 시작하면
더이상 "기본생성자"를 제공하지 않는다.
필요하다면 사용자가 직접 만들어서 사용해야 한다.

---------------------------------------------------------------------------------------
toString()
==> 자바의 제일 조상인 Object의 메소드이며
	객체의 속성값을 출력하고자 한다면
	toString을 자신에 맞게 만들어서 사용할 수 있다.
	
	com.kosta.exam25.Person@7c30a502
	com.kosta.exam25.Person@49e4cb85
	
	
	System.out.println(p1);
	System.out.println(p2);
		
	toString메소드를 정의하지 않으면
	위와 같이 주소값이 출력된다
	
	toString을 다음과 같이
	객체의 속성값을 문자열로 만들어서 반환하도록 하고 호출하면
	객체의 속성값을 출력할 수 있다.
	public String toString() {
		return "[이름:"+name+",나이:"+age+"]";
	} 
	[이름:홍길동,나이:20]
	[이름:김유신,나이:25]
	
---------------------------------------------------------------------------------------

<< 클래스변수와 클래스 메소드 >>

클래스변수는 맴버변수명 앞에 static키워드가 붙은 변수를 말하며
모든 객체가 공동으로 사용할 기억공간이 필요하거나 객체와 무관하게 사용
할 수 있는 변수 이다.

클래스 메소드는 맴버메소드명 앞에 static키워드가 붙은 메소드를 말하며
객체와 무관하게 사용할 수 있는 메소드를 말한다.

---------------------------------------------------------------------------------------

class Family{
	private String name;
	private int age;
	
	public void pro(){
		
	}
}

위의 클래스에서 name, age는 클래스의 맴버변수이며, 반드시 객체를 생성해야만
사용할 수 있고 또 객체마다 별도의 메모리 공간이 잡힙니다.

pro()메소드 역시 반드시 객체를 생성하고 그 객체를 통해서 호출 할 수 있다.

만약 객체와 무관하게 사용하고자 하는 변수가 필요하며, 변수이름 앞에 static키워드를 붙여 변수를 만들게 되면
객체와 무관하게 또, 모든 객체가 동일한 기억장소로 사용할 수 있다.
객체와 무관하게 사용해야 하기 때문에 클래스이름을 접근한다.
그래서 "클래서변수", "클래스메소드"라고 합니다.