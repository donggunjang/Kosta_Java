데이터베이스 명령어 종류

1. DDL	데이터정의어
2. DCL	제이터제어어
3. DML	데이터조작어

DML 종류
1. 레코드의 추가	INSERT
2. 레코드의 조회	SELECT
3. 레코드의 수정	UPDATE
4. 레코드의 삭제	DELETE

SELECT [집계함수]컬럼(들)
FROM 테이블명
WHERE 조건절					<- 원하는 조건식에 맞춰 조회할때
GROUP BY 컬럼명				<- 특정 컬럼의 값의 종류별로 집계를 내서 조회할 때
ORDER BY 컬럼명 [ASC],DESC 	<- 조회한 컬럼중에 특정 컬럼을 기준으로 오름차순이나, 내림차순으로 정렬할 때


----------------------------------------------------------------------------------------

연습)직책별로 사원의 수, 평균급여액을 출력
	사원수가 높은순으로 출력.
	
	SELECT job, COUNT(*) 사원수, AVG(salary) 평균급여액
	FROM emp
	GROUP BY job
	ORDER BY COUNT(*) DESC;


연습)부서명별로 사원의 수, 총급여액, 평균급여액을 출력하시오.
	단, 총급여액이 높은순으로 출력.
	
	SELECT dname, COUNT(*) 사원수, SUM(salary) 총급여액, AVG(salary) 평균급여액
	FROM emp e, dept d
	WHERE e.dno = d.dno
	GROUP BY dname
	ORDER BY SUM(salary) DESC;
	

연습)개발팀에 근무하는 직원들의 직책별 평균급여액을 출력.
	평균 급여액이 높은 순으로 출력.
	
	SELECT job, AVG(salary) 평균급여액
	FROM emp e, dept d
	WHERE d.dname LIKE('%개발%')
	GROUP BY job
	ORDER BY AVG(salary) DESC;
	
연습)'굿스포츠'나, '탈골스윙'의 도서명별로 판매건수를 출력합니다.
	단, 판매건수가 높은순으로 출력 
	
	SELECT bookname, COUNT(*) AS 판매건수
	FROM orders o, book b
	WHERE b.bookid = o.bookid
	AND pubhlisher in ('굿스포츠', '탈골스윙')
	GROUP BY bookname
	ORDER BY COUNT(*) DESC;
	
==> 위의 결과에서 만약에 판매건수가 2개 이상인것만 조회하고 싶다.
==> 이럴때 사용하는 구문이 HAVING 이다.

-----------------------------------------------------------------------------------------

<< HAVING의 사용>>
GROUP BY 절에 나타난 결과에 대하여 조건식을 주고자 할 때 사용한다.

연습) '굿스포츠'나, '탈골스윙'의 도서명별로 판매건수를 출력합니다.
	단, 판매건수가 2건 이상이 것만 출력하고
	단, 판매건수가 높은순으로 출력
	
	SELECT bookname, COUNT(*) 판매건수
	FROM book b, orders o
	WHERE b.bookid = o.bookid
	AND pubhlisher in('굿스포츠', '탈골스윙')
	GROUP BY bookname
	HAVING COUNT(*) >= 1
	ORDER BY COUNT(*) DESC;
	
<< SELECT문 형식 >>
SELECT [집계함수] 컬럼(들)
FROM 테이블(들)
[WHERE 조건식]
[GROUP BY 컬럼(들)]
[HAVING 조건식]
[ORDER BY 컬럼(들)]

연습) 고객명별로 구매건수와 총구매금액을 출력하시오.
	단, 총 구매금액이 10000원 이상인고객만 출력하고
	총 구매금액이 높은 순으로 출력.
	
	SELECT name, COUNT(*) 구매건수, SUM(saleprice) 총구매금액
	FROM customer c, orders o
	WHERE c.custid = o.custid
	GROUP BY name
	HAVING SUM(saleprice) >= 10000
	ORDER BY SUM(saleprice) DESC;
	
연습) '판교'나, '종각'에 근무하는
	직원들의 부서명별로 근무하는 직원의 수, 총급여액, 평균급여액을 출력하시오.
	단, 직원의 수가 2명 이상인 부서만 출력하고
	총급여액이 높은 순으로 출력,
	총급여액이 동일할때에는 평균급여액 순으로 출력.
	
	SELECT dname, COUNT(*) 직원수, SUM(salary) 총급여액, AVG(salary) 평균급여액
	FROM dept d, emp e
	WHERE d.dno = e.dno
	AND dloc in ('판교','종각')
	GROUP BY dname
	HAVING COUNT(*) >= 2
	ORDER BY SUM(salary) DESC, AVG(salary);
	
연습) '축구'관련 도서에 대해
	도서명 별로 판매건수를 출력
	단, 판매건수가 높은순으로 출력
	
	SELECT bookname, COUNT(*) 판매건수
	FROM book b, orders o
	WHERE b.bookid = o.bookid
	AND bookname LIKE '%축구%'
	GROUP BY bookname
	ORDER BY COUNT(*);
	
SELECT문의 형식

SELECT [집계함수] 컬럼(들) 
FROM 테이블(들)
[ WHERE 조건식 ] 
[ GROUP BY 컬럼(들) ]
[ HAVING 조건식 ]
[ ORDER BY 컬럼(들) (ASC, DESC) ]

---------------------------------------------------------------------------------------

join에 대하여 설명 
==> 조회하고자 하는 컬럼이 두 개 이상의 테이블에 있을때 조인을 이용한다. 
(두개 이상의 테이블을 조회할 때 관계를 맺은 속성을 이용하여 조회하는 것)

직원 이름과 그 직원의 관리자 이름을 조회

 ENO ENAME      JOB        HIREDATE          SALARY   DNO   MGR
----- ---------- ---------- --------------- -------- ----- -----
 1000 변시우     사장       10/01/03           1,000    10
 1001 이동준     과장       12/08/27             600    10  	1000
 1002 박성빈     대리       14/07/28             400    10  	1001
 1003 임유나     사원       23/10/10             200    10  	1002
 1004 홍석영     사원       18/02/17             200    10  	1002
 1005 최모래     과장       13/01/02             500    20  	1000
 1006 유요한     대리       14/01/02             400    20  	1005
 1007 유현진     사원       20/09/12             300    20  	1006
 1008 박규희     사원       20/09/12             300    20  	1006

 ==> '박성빈' 직원의 관리자는 '이동준'이다
 ==> emp 테이블의 mgr은 emp테이블의 eno를 참조한다.
 	만약 모든 직원의 이름과 관리자 이름을 조회 하고자 하면
 	SELF JOIN을 할 수 있다.
 	실제로 물리적으로 테이블은 emp라는 테이블 한개만 있는데
 	이것은 한번은 '직원'이라고 보고 한번은 '관리자'로 보고,
 	두개를 조인하여 직원이름과 관리자 이름을 조회할 수 있다.
 	
---------------------------------------------------------------------------------------

<< SELF JOIN >>
실제로는 하나의 테이블인데
칼럼의 값이 그 테이블의 다른 칼럼을 참조할 때
사용하는 조인이다.

emp테이블의 mgr은 emp테이블의 eno를 참조하고 있다
만약 직원의 이름과 관리자 이름을 조회 하고자 하면
emp 테이블을 하나는 '직원'이라고 애칭을 주고
하나는 '관리자'라고 애칭을 주어 조인 할 수 있다.

emp e	직원
emp m	관리자

SELECT e.ename, m.ename
FROM  emp e, emp m
WHERE e.mgr = m.eno;
	
연습) 개발팀의 근무하는 모든 직원들의 사원번호, 사원명, 관리자명, 부서 번호, 부서명을 조회
	
	SELECT e.eno, e.ename, m.ename, e.dno, dname
	FROM emp e, emp m, dept d
	WHERE (e.mgr = m.eno) AND (e.dno = d.dno)
	AND dname LIKE'%개발%';

연습) '개발'팀에 근무하는 직원들 중에
	관리자 보다 입사일이 빠른 직원의
	사원번호, 사원명, 관리자명, 입사일, 관리자의 입사일을 조회.
	
	SELECT e.eno, e.ename, m.ename, e.hiredate, m.hiredate  
	FROM emp e, emp m, dept d
	WHERE e.mgr = m.eno AND e.dno = d.dno
	AND dname LIKE'%개발%'
	AND e.hiredate < m.hiredate;
	
연습) '판교'나 '종각'에 근무하고
	직책이 '사원'이거나 '대리'인 직원들 중에서
	입사일이 관리자 보다 빠르거나 급여가 관리자 보다 많은 직원들의
	사원번호, 사원명, 관리자명, 입사일, 관리자의 입사일, 급여, 관리자의 급여를 조회.
	단, 입사일 순으로 조회하고, 동일할 때에는 급여가 높은순으로 출력
	
	SELECT e.eno, e.ename, m.ename, e.hiredate, m.hiredate, e.salary, m.salary  
	FROM emp e, emp m, dept d
	WHERE e.mgr = m.eno 
	AND e.dno = d.dno
	AND (dloc in('판교','종각') AND e.job in ('사원','대리'))
	AND (e.hiredate < m.hiredate OR e.salary > m.salary)
	ORDER BY e.hiredate, e.salary DESC; 
	
연습) '박성빈'의 부하직원들의
	사원번호, 사원명, 입사일, 급여를 조회
	입사일 순으로 조회
	
	SELECT e.eno, e.ename, e.hiredate, e.salary
	FROM emp e, emp m
	WHERE e.mgr = m.eno
	AND m.ename = '박성빈'
	ORDER BY e.hiredate;
	
-------------------------------------------------------------------------------------------

<< SELECT 문의 형식 >>
									순서
SELECT [집계함수] 컬럼(들) 				5
FROM 테이블(들)						1
[ WHERE 조건식 ] 						2
[ GROUP BY 컬럼(들) ]					3
[ HAVING 조건식 ]						4
[ ORDER BY 컬럼(들) (ASC, DESC) ]		6


-------------------------------------------------------------------------------------------

연습) 고객번호별로 주문한 건 수를 조회
	
	SELECT custid 고객번호 , COUNT(*) 주문건수
	FROM orders
	GROUP BY custid;
	
	
연습) 고객이름별로 주문한 건수를 조회
	
	SELECT name, COUNT(*) 주문건수
	FROM customer c, orders o
	WHERE c.custid = o.custid
	GROUP BY name;
NAME                   주문건수
-------------------- ----------
박지성                        3
손흥민                        1
이강인                        1
로리 맥길로이                   3
박세리                        2

==> 주문이 없는 고객은 출력이 되지 않는다.
==> INNER JOIN
==> 양쪽 테이블에 모두 조건을 만족하는 레코드만 조회된다.
==> 만약 주문이 없는 고객 이름도 출력하고자 한다면
	OUTER JOIN을 이용한다.

=============================================================
일반적인 조인 (INNER JOIN)
==> 두개의 테이블에 모두 조건식을 만족하는 레코드를 검색

외부조인(OUTER JOIN)
==> 두개의 테이블에 왼족이나 오른쪽에 레코드는
	조건을 만족하지 않더라도 모두 검색
	
=============================================================

LEFT OUTER JOIN
	==> 조건을 만족하지 않더라도 왼쪽의 테이블은 무조건 검색
	
RIGHT OUTER JOIN 
	==> 조건을 만족하지 않더라도 오른쪽의 테이블은 무조건 검색
	
=============================================================

<< OUTER JOIN의 형식 >>

SELECT 컬럼(들)
FROM 테이블1 RIGHT|LEFT OUTER JOIN 테이블2
ON 조건식

연습) 모든 고객에 대하여 고객이름별로 주문한 건수를 조회, 단 주문이 없는 고객이름도 출력

	SELECT name 이름, COUNT(o.custid) 주문건수
	FROM customer c LEFT OUTER JOIN orders o
	on c.custid = o.custid
	GROUP BY name;

 이름                                       주문건수
---------------------------------------- ----------
박지성                   	        	           3
로리 맥길로이               	                   3
박세리                        	               2
이강인                                	       1
손흥민                                    	   1
김민                                 			   0
김동규                                  	       0
김철                                     		   0

=============================================================

연습)	관리자 이름별로 부하직원의 수를 조회.
	단 부하직원이 없는 직원의 이름도 조회.
	
SELECT m.ename 관리자, COUNT(e.eno)
FROM emp m LEFT OUTER JOIN emp e
ON e.mgr = m.eno
GROUP BY m.ename;
	
연습)	부서명별로 총직원의 수를 조회
	단 소속된 직원이 없는 부서명도 조회

SELECT dname 부서명, COUNT(e.eno) AS 직원수
FROM dept d LEFT OUTER JOIN emp e
ON d.dno = e.dno
GROUP BY dname;
	
	
연습)	출판사 별로 총 주문건수, 총주문금액을 조회
	주문내역이 없는 출판사도 조회

SELECT pubhlisher, COUNT(o.orderid) 주문건수, SUM(saleprice) 총주문금액
FROM orders o RIGHT OUTER JOIN book b
ON o.bookid = b.bookid
GROUP BY pubhlisher;
	
PUBHLISHER             주문건수 총주문금액
-------------------- ---------- ----------
굿스포츠          	          1       6000
손웅정                      1      19000
나무수                      1      13000
손흥민                      1      23000
자신감                   	  1      10000
탈골스윙                	  2      43000
로리 맥길로이                 1      30000
김성근                      1      15000
오타니쇼헤이                  1      17800
코스타미디어                  0	

==> count함수는 조건을 만족하는 레코드가 한개도 없으면 0
==> count 이외의 집계함수는 조건을 만족하는 레코드가 없으면 null
	-> null인 값을 다른값으로 채우고 싶을때 사용하는 함수 ==> NVL(컬럼, 값)
	
SELECT pubhlisher, COUNT(o.orderid) cnt, NVL(SUM(saleprice), 0) sum
FROM orders o RIGHT OUTER JOIN book b
ON o.bookid = b.bookid
GROUP BY pubhlisher;

PUBHLISHER                  CNT        SUM
-------------------- ---------- ----------
굿스포츠                      	1       6000
손웅정                       	1      19000
나무수                        1      13000
손흥민                        1      23000
자신감                        1      10000
탈골스윙                      	2      43000
로리 맥길로이                 	1      30000
김성근                        1      15000
오타니쇼헤이                  	1      17800
코스타미디어                  	0          0

** OUTER JOIN에 대하여 설명 하시오.
OUTER JOIN은 두개의 테이블을 조회 할 때 
조건에 맞지 않는 레코드도 조회할 수 있게 하는 조인이다.