연습) 고객 이름별로 주문한 건수를 조회
	단, 주문이 없는 고객 이름도 조회
	
SELECT name, count(o.custid)AS주문건수
FROM customer c LEFT OUTER JOIN orders o
ON c.custid = o.custid
GROUP BY name;

NAME                 AS주문건수
-------------------- ----------
박지성                        3
손흥민                        1
이강인                        1
로리 맥길로이                 	3
박세리                        2
김동규                        0
김철                        	0
김민                      	0


--------------------------------------------------------------------------------
<< OUTER JOIN 의 형식 >>

SELECT 컬럼(들)
FROM 테이블1 LEFT|RIGHT OUTER JOIN 테이블2
ON 조건식
[GROUP BY]
[HAVING]
[ORDER BY]

연습) 관리자 이름별로 부하직원의 수를 조회
	단, 부하 직원이 없는 직원의 이름도 조회
	
SELECT m.ename, count(e.ename)
FROM emp e RIGHT OUTER JOIN emp m
ON e.mgr = m.eno
GROUP BY m.ename
ORDER BY COUNT(e.ename) DESC;

-------------------------------------------------------------------------------------
연습) 부서명별로 총직원의 수를 조회
	단, 소속된 직원이 없는 부서명도 출력
	
SELECT dname, COUNT(eno)
FROM dept d LEFT OUTER JOIN emp e
ON d.dno = e.dno
GROUP BY dname;

연습) 출판사별로 총주문건수, 총주문금액을 조회
	단, 주문내역이 없는 출판사도 출력
	
SELECT pubhlisher, COUNT(orderid), NVL(SUM(saleprice),0)
FROM book b LEFT OUTER JOIN orders o
ON b.bookid = o.bookid
GROUP BY pubhlisher;

연습) 도서명 별로 총주문건수, 총주문금액을 조회
	(주문내역이 없는 도서명도 조회)
	
SELECT bookname, COUNT(orderid) 총주문건수, NVL(SUM(saleprice),0) 총주문금액
FROM book b LEFT OUTER JOIN orders o
ON b.bookid = o.bookid
GROUP BY bookname;

연습) 고객명 별로 총주문건수, 총주문금액, 평균주문금액, 최고주문금액을 조회
	(주문내역이 없는 고객명도 조회) 

SELECT name, COUNT(orderid) cnt, NVL(SUM(saleprice),0) sum, 
NVL(AVG(saleprice),0) avg, NVL(MAX(saleprice),0) max
FROM customer c LEFT OUTER JOIN orders o
ON c.custid = o.custid
GROUP BY name
ORDER BY cnt DESC, sum DESC;

--------------------------------------------------------------------------------------

<< 3개의 테이블 OUTER JOIN 하기 >>

SELECT 컬럼(들)
FROM 테이블1 LEFT|RIGHT OUTER JOIN 테이블2
ON 조건식 
LEFT|RIGHT OUTER JOIN 테이블3
ON 조건식;

연습) 고객의 이름과 고객이 주문한 도서이름을 조회하시오.
	단, 주문이 없는 고객이름도 조회
	또, 고객이름 순으로 정렬
	
SELECT name, NVL(bookname, '주문내역없음') bookname
FROM customer c LEFT OUTER JOIN orders o
ON c.custid = o.custid
LEFT OUTER JOIN book b
ON o.bookid = b.bookid
GROUP BY name, bookname
ORDER BY name;

----------------------------------------------------------------------------------------

<< 3개의 테이블을 OUTER JOIN 하고 WHERE 조건식 사용 >>

SELECT 컬럼(들)
FROM 테이블1 LEFT|RIGHT OUTER JOIN 테이블2
ON 조건식
LEFT|RIGHT OUTER JOIN 테이블3
ON 조건식
WHERE 조건식

연습) '탈골스윙'이나 '손웅정', '굿스포츠'의
	도서를 구매한 고객의 이름과 출판사명, 주문한 도서명을 출력하시오.
	주문이 없는 고객의 이름도 출력하고 고객이름 순으로 출력
	
SELECT name, pubhlisher, bookname
FROM customer c LEFT OUTER JOIN orders o
ON c.custid = o.custid
LEFT OUTER JOIN book b
ON o.bookid = b.bookid
WHERE pubhlisher in('탈골스윙', '손웅정', '굿스포츠')
ORDER BY name;

NAME                 PUBHLISHER           BOOKNAME
-------------------- -------------------- --------------------
로리 맥길로이			탈골스윙             골프 교본
박지성               굿스포츠             축구의 역사
박지성               손웅정               세계의 벽
박지성               탈골스윙             골프 바이블

==> 주문내역이 없는 고객이름이 출력 되지 않는다.
==> WHERE는 inner 조인으로 동작하기 때문에
	양쪽 테이블에 모두 만족하는 것만 레코드만 조회된다.

<< IS NULL 사용 >>
SELECT name, nvl(pubhlisher,'주문내역없음') pubhlisher, NVL(bookname,'주문내역없음') bookname
FROM customer c LEFT OUTER JOIN orders o
ON c.custid = o.custid
LEFT OUTER JOIN book b
ON o.bookid = b.bookid
WHERE b.pubhlisher in('탈골스윙', '손웅정', '굿스포츠') 
OR b.pubhlisher IS NULL
ORDER BY name;

NAME                 PUBHLISHER           BOOKNAME
-------------------- -------------------- --------------------
김동규               주문내역없음         주문내역없음
김민                 주문내역없음         주문내역없음
김철                 주문내역없음         주문내역없음
로리 맥길로이        탈골스윙             골프 교본
박지성               탈골스윙             골프 바이블
박지성               굿스포츠             축구의 역사
박지성               손웅정               세계의 벽

<< 서브쿼리 사용 >> 

SELECT name, pubhlisher, bookname
FROM customer c LEFT OUTER JOIN orders o
ON c.custid = o.custid
LEFT OUTER JOIN (SELECT * FROM book WHERE pubhlisher in('탈골스윙', '손웅정', '굿스포츠')) b
ON o.bookid = b.bookid
ORDER BY name;

NAME                 PUBHLISHER           BOOKNAME
-------------------- -------------------- --------------------
김동규
김민
김철
로리 맥길로이        탈골스윙             골프 교본
로리 맥길로이
로리 맥길로이
박세리
박세리
박지성               손웅정               세계의 벽
박지성               탈골스윙             골프 바이블
박지성               굿스포츠             축구의 역사
손흥민
이강인
-------------------------------------------------------------------------------------------

<< 서브쿼리(중첩질의)의 사용 >>
--> sql 문장안에 포함되는 또다른 sql문을 "서브쿼리"라고 한다.

연습) 가장 비싼 도서의 이름

SELECT bookname
FROM book
WHERE price = ( SELECT max(price) FROM book);

<< 서브쿼리의 위치 >>
SELECT 절
FROM 절
WHERE 절 

연습) '탈골스윙'이나 '손웅정' '굿스포츠'의
	도서를 구매한 고객의 이름과 출판사명, 주문한 도서명을 출력하시오.
	주문이 없는 고객의 이름도 출력하고 고객이름 순으로 출력.
	
고객
주문
도서
	-고객과 주문으로 부터 고객이름, 도서번호를 출력
	SELECT name, bookid
	FROM customer c LEFT OUTER JOIN orders o			==> A
	ON c.custid = o.custid;
	
	-도서테이블에 '탈골스윙'이나 '손웅정', '굿스포츠'의
	출판사명, 도서명, 도서번호를 출력
	SELECT pubhlisher, bookname, bookid
	FROM book
	WHERE pubhlisher in('탈골스윙', '손웅정', '굿스포츠');		==> B
	
	SELECT name, pubhlisher, bookname
	FROM (
	SELECT name, bookid
	FROM customer c LEFT OUTER JOIN orders o
	ON c.custid = o.custid
	) A LEFT OUTER JOIN (
	SELECT pubhlisher, bookname, bookid
	FROM book
	WHERE pubhlisher in('탈골스윙', '손웅정', '굿스포츠')
	) B
	ON A.bookid = B.bookid;
	
	- 도서와 주문 테이블로 부터 출판사가 '탈골스윙','손웅정', '굿스포츠'인
	고객번호, 도서명, 출판사명을 출력
	
	SELECT custid, bookname, pubhlisher
	FROM book b, orders o
	WHERE b.bookid = o.bookid 
	AND pubhlisher in('탈골스윙', '손웅정', '굿스포츠');
	
	위의 결과를 FROM 절의 서브쿼리로 하여 customer 와 outer join을 한다.
	
연습) '탈골스윙'이나 '손웅정' '굿스포츠'의
	도서를 구매한 고객의 이름과 출판사명, 주문한 도서명을 출력하시오.
	주문이 없는 고객의 이름도 출력하고 고객이름 순으로 출력.
	
	SELECT name, pubhlisher, bookname
	FROM customer c LEFT OUTER JOIN 
	(
	SELECT custid, bookname, pubhlisher
	FROM book b, orders o
	WHERE b.bookid = o.bookid 
	AND pubhlisher in('탈골스윙', '손웅정', '굿스포츠')
	) o
	ON c.custid = o.custid
	ORDER BY name;
	
--------------------------------------------------------------------------------------------------------

연습) 구매한 내역이 있는 고객의 이름을 출력
		(조인, 서브쿼리)
		
SELECT DISTINCT name
FROM customer c, orders o
WHERE c.custid = o.custid;

SELECT name
FROM customer
WHERE custid in (SELECT DISTINCT custid FROM orders);

3행에 오류:
ORA-01427: 단일 행 하위 질의에 2개 이상의 행이 리턴되었습니다.
==> 서브쿼리의 건수가 여러건일때는 "다중행 연산자"를 사용해야 한다.

연습) '탈골스윙'의 도서를 구매한 고객의 이름을 출력

SELECT DISTINCT name 
FROM customer c, orders o, book b
WHERE c.custid = o.custid
AND o.bookid = b.bookid
AND pubhlisher = '탈골스윙';

도서테이블에서 탈골스윙에서  출간하는 도서번호
SELECT bookid FROM book WHERE pubhlisher = '탈골스윙'; ==>A

주문테이블에서 A를 구매한 고객 번호
SELECT DISTINCT custid FROM orders
WHERE bookid in (SELECT bookid FROM book WHERE pubhlisher ='탈골스윙'); =>

SELECT name 
FROM customer
WHERE custid in (SELECT DISTINCT custid FROM orders
WHERE bookid in (SELECT bookid FROM book WHERE pubhlisher = '탈골스윙'));

연습) 부하직원이 있는 직원의 이름을 출력
	( 조인, 서브쿼리 )

SELECT DISTINCT m.ename
FROM emp e , emp m
WHERE e.mgr = m.eno;

SELECT ename
FROM emp
where eno in (SELECT mgr FROM emp);

------------------------------------------------------------------------------
1) 데이터 베이스 명령어의 종류를 쓰시오.
=> DDL 데이터 정의어
	: 데이터베이스 테이블이나 개체를 생성하거나 수정, 삭제하는 명령어를 말한다.
   DML 데이터조작어
    : 레코드의 생성,조회,수정,삭제하는 명령어들
   DCL 데이터 제어어
	: 사용자 계정을 생성하고 권한을 부여하거나 회수 하는 명령어를 말한다.
	

2) 데이터조회를 위한 SELECT 문의 형식을 쓰시오.
=> SELECT 컬럼(들)
   FROM 테이블(들)
   [WHERE 조건식]
   [GROUP BY 컬럼(들)]
   [HAVING 조건식]
   [ORDER BY 컬럼(들)] 

3) WHERE절에 대하여 설명
=> 조건식에 따른 레코드를 조회 하기 위해 사용하는 명령어

4) GROUP BY 절에 대하여 설명
=> 특정 컬럼의 값의 종류별로 집계함수를 사용할 때 사용하는 명령어

5) HAVING에 대하여 설명
=> GROUP BY절의 결과에 대한 조건식을 사용하여 조회하기 위한 명령어

6) INNER JOIN, OUTER JOIN, SELF JOIN에 대하여 각각 설명.
=> INNER JOIN은 두개이상의 테이블을 통합해서 조건식에 맞는 컬럼들만 조회
=> OUTER JOIN은 두개 이상의 테이블을 조회할 때 왼쪽이나 오른쪽 테이블의 컬럼들이 조건식을 
	만족하지 않더라도 조회하기 위해 사용한다.
=> SELF JOIN은 한개의 동일한 테이블에서 다른 속성을 참조할때 다른 애칭을 주어 조인하는 방법이다.

7) 서브쿼리에 대하여 설명
=> 서브쿼리는 SELECT 절, WHERE 절, FROM 절에서 ()안에 다시 SELECT 절을 이용하여 조회 하는 방법이다.
	많은 레코드를 조회할때 성능이 좋다.
	
---------------------------------------------------------------------------------
연습) '박세리' 고객의 주문 내역을 출력

SELECT * FROM orders
WHERE custid = (SELECT custid FROM customer WHERE name = '박세리');

SELECT name, o.* 
FROM customer c, orders o
WHERE c.custid = o.custid
AND name = '박세리';

서브쿼리와 조인
==> 동일한 문제해결을 위하여 서브쿼리를 사용할 수도 있고
조인을 사용할 수도 있다.
데이터 수가 많을 때는 조인보다는 서브쿼리가 성능이 좋다.

연습) '박세리'고객의 총주문건수, 총주문금액, 평균주문금액을 출력
	( 서브쿼리 이용 )
	
SELECT COUNT(orderid) cnt, SUM(saleprice) sum, AVG(saleprice) avg
FROM orders
WHERE custid = (SELECT custid FROM customer WHERE name ='박세리');

연습) 고객별 총 주문건수, 총주문금액, 평균주문금액을 출력
	단, 주문내역이 없는 사람도 출력하고 총주문건수가 높은 순으로 출력
	동일할 때에는 총 주문금액이 높은 순으로 출력

< INNER JOIN  >
=> 주문내역이 없는 고객은 조회 X
SELECT name, COUNT(orderid) cnt, NVL(SUM(saleprice),0) sum, NVL(AVG(saleprice), 0) avg
FROM customer c, orders o
WHERE c.custid = o.custid
GROUP BY name
ORDER BY cnt DESC, sum DESC;

< OUTER JOIN >
=> 주문내역이 없는 고객 조회 O  
SELECT name, 
	COUNT(orderid) cnt, 
	NVL(SUM(saleprice),0) sum, 
	NVL(AVG(saleprice), 0) avg
FROM orders o RIGHT OUTER JOIN customer c
ON o.custid = c.custid
GROUP BY name
ORDER BY cnt DESC, sum DESC;

------------------------------------------------------------------------------
연습) '굿스포츠', '탈골스윙', '손웅정' 출판사들의 도서를 구매한
	고객들의 고객별 총주문건수, 총주문금액, 평균주문금액을 출력
	단, 총주문건수가 높은순으로 출력하고 동일할 때에는
	총주문금액이 높은순으로 출력.

< INNER JOIN >	
SELECT name, 
	COUNT(orderid) cnt, 
	NVL(SUM(saleprice), 0) sum, 
	NVL(AVG(saleprice), 0) avg
FROM customer c, orders o, book b
WHERE c.custid = o. custid 
AND b.bookid = o.bookid
AND pubhlisher in ('굿스포츠', '탈골스윙', '손웅정')
GROUP BY name
ORDER BY cnt DESC, sum DESC;

< 서브쿼리 >

- 고객 아이디별로 총 주문건수, 총주문금액, 평균주문금액

SELECT custid, COUNT(orderid) cnt, 
	NVL(SUM(saleprice), 0) sum, 
	NVL(AVG(saleprice), 0) avg
FROM orders 
GROUP BY custid;

- 고객 아이디별로 '굿스포츠', '탈골스윙', '손웅정' 출판사들의 도서를 구매한
총주문건수, 총주문금액, 평균주문금액을 출력

SELECT custid,
	COUNT(orderid) cnt, 
	NVL(SUM(saleprice), 0) sum, 
	NVL(AVG(saleprice), 0) avg
FROM orders 
WHERE bookid in (SELECT bookid FROM book 
WHERE pubhlisher in ('굿스포츠', '탈골스윙', '손웅정'))
GROUP BY custid;

- '굿스포츠', '탈골스윙', '손웅정' 출판사들의 도서를 구매한
고객명 별로 총주문건수, 총주문금액, 평균주문금액을 출력

SELECT (SELECT name FROM customer c WHERE c.custid = o.custid ) name,
	COUNT(orderid) cnt, 
	NVL(SUM(saleprice), 0) sum, 
	NVL(AVG(saleprice), 0) avg
FROM orders o
WHERE bookid in (SELECT bookid FROM book 
WHERE pubhlisher in ('굿스포츠', '탈골스윙', '손웅정'))
GROUP BY custid;

---------------------------------------------------------------------------
연습) '굿스포츠', '탈골스윙', '손웅정' 출판사들의 도서를 구매한
	고객들의 고객별 총주문건수, 총주문금액, 평균주문금액을 출력
	단, 총주문 건수가 3건 이상인 고객만 출력하고 
	총주문건수가 높은순으로 출력하고 동일할 때에는
	총주문금액이 높은순으로 출력.
	
	SELECT custid,
	COUNT(orderid) cnt, 
	NVL(SUM(saleprice), 0) sum, 
	NVL(AVG(saleprice), 0) avg
	FROM orders
	GROUP BY custid;
	
	SELECT (SELECT name FROM customer c WHERE c.custid = o.custid ) name,
	COUNT(orderid) cnt, 
	NVL(SUM(saleprice), 0) sum, 
	NVL(AVG(saleprice), 0) avg
	FROM orders o
	WHERE bookid in (SELECT bookid FROM book 
	WHERE pubhlisher in ('굿스포츠', '탈골스윙', '손웅정'))
	GROUP BY custid
	HAVING COUNT(orderid) >= 3
	ORDER BY cnt DESC, sum DESC;
	
1) 마당서점의 도서의 총 개수
SELECT COUNT(*) FROM book;

2) 마당서점에서 도서를 출고하는 출판사의 총 개수
SELECT COUNT(DISTINCT pubhlisher) FROM book;
	
3) 모든 고객의 이름, 주소
SELECT name, address FROM customer;

4) 2024/06/01 ~ 06/17 사이에 주문받은 도서의 주문번호
SELECT orderid FROM orders WHERE orderdate BETWEEN '24/06/01' AND '24/06/17';

5) 2024/06/01~ 6/17 사이에 주문받은 도서를 제외한 주문번호
SELECT orderid FROM orders WHERE orderdate NOT BETWEEN '24/06/01' AND '24/06/17';

6) 성이 '김' 씨인 고객의 이름과 주소
SELECT name, address 
FROM customer 
WHERE name LIKE '김%';

7) 성이 김씨 이고 이름이 '규'로 끝나는 고객의 이름과 주소
SELECT name, address 
FROM customer 
WHERE name LIKE '김%규';

8) 주문하지 않은 고객의 이름
SELECT name 
FROM customer c LEFT OUTER JOIN orders o
ON c.custid = o.custid
WHERE saleprice IS NULL;

select name from customer 
where  
custid not in 
(select distinct custid from orders);

select name from customer
minus
select name from customer c, orders o
where c.custid = o.custid;

9) 주문금액의 총액과 주문의 평균금액
SELECT SUM(saleprice) sum, AVG(saleprice) avg
FROM orders;

10) 고객의 이름과 고객별 구매액
SELECT name , NVL(SUM(saleprice),0) sum
FROM customer c LEFT OUTER JOIN orders o
ON c.custid = o.custid
GROUP BY name; 

select name, sum(saleprice) from 
customer c, orders o
where c.custid = o.custid 
group by name

11) 고객의 이름과 고객이 구매한 도서목록
	(고객별로 구매한 도서목록)
SELECT name, NVL(bookname, '없음') bookname
FROM customer c LEFT OUTER JOIN orders o
ON c.custid = o.custid
LEFT OUTER JOIN book b
ON o.bookid = b.bookid
GROUP BY name, bookname;

select name, bookname
from customer c, orders o, book b
where
c.custid = o.custid and
o.bookid = b.bookid
order by name;	
	
==> select 절의 서브쿼리


	
12) 도서의 가격과 판매가격의 차이가 가장 많은 주문
select price - saleprice from book b, orders o
where b.bookid = o.bookid;

select o.*
from orders o, book b
where 
o.bookid = b.bookid and
price - saleprice = (select max(price-saleprice) 
from orders o, book b

13) 도서의 판매액 평균보다 자신의 구매액 평균이 더 높은 고객의 이름
select name from (select name, avg(saleprice) avg
	from customer c, orders o
	where c.custid = o.custid
	group by name )
	where avg > (select avg(saleprice) from orders);
