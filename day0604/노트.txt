네트워크 프로그램
	==> 서로 떨어져 있는 컴퓨터 끼리 통신하기 위한 프로그램
	==> 자바에서는 네트워크 프로그래밍을 위하여 java.net 패키지에 관련 인터페이스와 클래스를 제공
----------------------------------------------------------------------------------------------------------------
ip address
   => 네트워크 상에 있는 특정한 컴퓨터를 식별하기 위한 주소
	내컴퓨터의 ip 주소 확인하기 => ipconfig
port 번호
   => 하나의 컴퓨터에서 여러개의 네트워크 프로그램이 동시에 실행 될 수 있음.
	특정 프로그램을 식별자의 역할
----------------------------------------------------------------------------------------------------------------
통신하는 방식
1. TCP 방식
	=> 현실세계의 전화와 비슷하게 통신하는 방식
	=> 통신을 할 상대방 컴퓨터와 연결이 이루어지고 난 다음에 연결된 회선을 통해
		데이터를 주고 받는 방식
	장점) 신뢰성 높음
	단점) 네트워크 부담이 높음
	
	==> 자바가 TCP 방식을 위하여 제공하는 클래스
		ServerSocket, Socket
2. UDP 방식
	=> 현실세계의 편지와 비슷하게 통신하는 방식
	=> 통신을 할 상대방 컴퓨터와 연결을 맺지 않고 덮어놓고 데이터를 보내는 방식
	장점) 네트워크 부담 낮음
	단점) 신뢰성 낮음
	
	==> UDP 방식을 위해서 자바가 제공하는 클래스
			DatagramSocket, DatagramPacket
--------------------------------------------------------------------------------------
Server	: 네트워크상에서 서비스를 제공하는 컴퓨터 혹은 프로그램

Client	: 네트워크상에서 서비스를 제공 받는 컴퓨터 혹은 프로그램

--------------------------------------------------------------------------------------

						<<TCP방식의 프로그래밍 절차>>
	
		Server									Client
1.	ServerSocket 생성.						
2.	클라이언트의 접속을 무한 대기 상태로 기다린다.				
3.											Socket객체를 생성하여 통신을 요청한다.
4.	accept 메소드가 호출되어 통신을 수락한다.
	(Socket 반환)
5.					서버와 틀라이언트가 각각의 소켓을 통하여 Stream을 생성한다.
6.					스트림을 통하여 데이터를 주고 받는다.
7.					사용했던 자원을 닫아 준다.

---------------------------------------------------------------------------------------
						<<UDP방식의 프로그래밍 절차>>
				
void	receive(DatagramPacket p)
void	send(DatagramPacket p)
	
		데이터를 받는쪽(Receiver)					데이터를 보내는 쪽(Sender)
1.	DatagramSocket 생성						DatagramSocket 생성						
2.	DatagramPacket 생성						DatagramPacket 생성
3.	receive를 통해서 데이터를 수신					send를 통해 데이터 전송
4.	사용했던 자원을 닫아 준다.						사용했던 자원을 닫아 준다.

---------------------------------------------------------------------------------------

데이터베이스(Database)

프로그램을 실행한 결과를 화면에 출력하면
	컴퓨터의 전원을 끄면 그 내용은 사라지게 됩니다.
	실행결과를 영구적으로 저장하려면 "파일"에 기록할 수 있다.
	
	그러나 "파일"은 다음과 같은 단점이 있다.
	그 "파일"에 대한 이해관계에 있는 사람이 다수일 때
	최신의 정보를 공유하기가 어렵다.
	
	 이해관계에 있는 다수의 사람들이
	 항상 최신의 정보를 공유하기 위해서는
	 "데이터베이스"를 이용합니다.
	 
	 DataBase 						<---- 데이터를 쌓아 놓은 더미
	 DataBase Management System		<---- DBMS
	 
	 DBMS 종류(관계형 데이터베이스)
	 	1) Oracle					**
	 	2) MS Sql
	 	3) MySql	<-- Oracle 인수
	 	4) MariaDB
	 	...
	 
	 Nosql
	 	문서기반 NoSQL -> MongoDB
	 	
-------------------------------------------------------------------------------------
C:\> sqlplus
C:\> system
C:\> manager			
			
오라클 사용자 계정을 만드는 명령
create user 사용자이름 indentified by 암호;

연결할 수 있는 권한, 리소스를 만들 수 있는 권한, dba 권한을 부여
grant connect, resourece, dba to 사용자 이름;


c##madang/ madang

-------------------------------------------------------------------------------------
연습)
사용자한테 이름, 국어, 영어, 수학을 입력받아 
데이터베이스에 저장하는 프로그램 작성

==> 이렇게 하기 위해서 
		데이터베이스에 이러한 정보를 기록하기 위한 "테이블"을 만들어야 한다.
-------------------------------------------------------------------------------------
CREATE TABLE 테이블명(속성명 자료형, 속성명 자료형... );

CREATE TABLE student(name varchar2(20), kor number, eng number, math number);

-------------------------------------------------------------------------------------
테이블에 자료 추가 하는 명령어

insert into 테이블명 values(값1,값2, ..);

insert into student values('홍길동', 100, 100, 70);

문자열 데이터는 홋 따음표로 묶어 줘야 한다.
-------------------------------------------------------------------------------------

데이터 조회하는 명령어
select 속성1, 속성, ..from 테이블명;

select kor from student;
select kor, eng from student;
select * from student 
-------------------------------------------------------------------------------------

자바에서 데이터베이스에 	연결하는 	프로그램
 	java	DataBase	Connect	프로그램
 	==> JDBC	
-------------------------------------------------------------------------------------
 << JDBC 연결 프로그래밍 절차 >>
 
 0. DBMS 드라이버를 오라클 설치된 경로에서 찾아서 이클립스에 설정 해야한다.
 	프로젝트이름 오른쪽 클릭
 	-> propertices
 	-> java Build Path
 	-> Libraies
 	-> Classpath
 	-> Add External JARs..
 	C:\app\WD\product\21c\dbhomeXE\jdbc\lib\ojdbc8.jar
 	-> Apply and Close
 1. DBMS 드라이버를 메모리로 로드 한다.
 	Class.forName("oracle.jdbc.driver.oracleDriver")
 	
 2. DB서버에 연결한다.
 	Connection conn = DriverManger.getConnection("DB서버의 url", "사용자이름", "암호");
 	
 3. 데이터베이스 명령어 실행 담당자 객체를 생성한다.
 	Statement stmt = conn.createStatement();
 	
 4. 실행담당자를 통해서 데이터베이스 명령어를 실행한다.
	int re = stmt.executeUpdate(sql);
	
 5. 사용했던 자원을 닫아 준다.
 	if(stmt != null){
 		stmt.close();
 	}
 	
 	if(conn != null){
 		conn.close();
 	}
 	
 
 
 
 