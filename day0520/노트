클래스변수 : 일반적으로 클래스의 맴버변수들을 객체를 생성해야지만 메모리가 확보되고
			반드시 객체를 통해서 사용할 수 있는데 만약 객체와 무관하게 사용할 공간이 필요하거나,
			모든 객체가 공동으로 사용할 메모리 공간이 필요하다면 맴버변수명 앞에 static키워드를 붙여서
			클래스변수로 만들어서 사용한다.
			객체없이 접근해야 하기 때문에 클래스이름으로 접근한다.
			
클래스 메소드 : 일반적으로 맴버메소드들은 반드시 객체를 생성하고 그 객체를 통해서 사용할 수 있다.
			만약, 객체와 무고나하게 동작시키고자 하는 기능이 있다면 메소드이름 앞에 static 키워드를 붙여서 클래스 메소드로 만들어서 사용한다.
			객체 없이도 접근해야 하기 때문에 클래스 이름으로 접근한다.
			
클래스변수와 클래스메소드는 객체 없이
클래스 이름으로 접근 할 수 있고 만약에 객체가 있다면 객체를 통해서도 접근할 수 있다.

클래스 메소드 에서는 반드시 클래스 맴버에만 접근할 수 있다.
객체를 생성해야만 사용할 수 있는 일반 맴버에는 접근할 수 없다.

----------------------------------------------------------------------------------

** 생성자 중복(Constructor Overloading)에 대하여 아는데로 설명하시오.

생성자는 클래스 이름과 같은 이름으로 메소드를 생성하는데 객체 생성시에 자동 수행되어 맴버변수들을 초기화 할 목적으로 사용한다.
이러한 생성자를 여러개 중복하여 정의 할 수 있다. 단, 매개변수의 개수와 데이터 타입이 달라야 한다.


-----------------------------------------------------------------------------------
** 메소드 중복(Method Overloading)

같은 이름의 메소드를 중복하여 정의하는 것을 말하며, 매개변수의 개수가 다르거나 자료형이 달라야 한다.

------------------------------------------------------------------------------------
	1) 은닉성(Encapsulation)
		외부로 부터 데이터(멤버변수)를 보호하는 것
			접근명시자 : private, public
	
	2) 상속성(Inheritance)
		이미 정의되어 있는 클래스를 확장하여(상속하여) 새로운 클래스를 만들 수 있다.
		코드의 재사용성을 높일 수 있다.
		
		==> 상속을 해 준 클래스를 "부모클래스", "상위클래스", "조상클래스"
		==> 상속을 받은 클래스를 "자식클래스", "하위클래스", "후손클래스"
		
--------------------------------------------------------------------------------------
class 부모클래스 {


}

class 자식클래스 extends 부모클래스 {


}

이렇게 함으로써 자식클래스는 부모클래스의 모든 속성과 동작을 물려받게 된다.
미래에 만들어질 클래스들의 공통적인 속성과 동작을 뽑아서 "일반화" 하는 것도 "상속"이라고 할 수 있다.

----------------------------------------------------------------------------------------
super();
상속관계에 있을때 부모클래스의 생성자를 동작시키는 키워드 명령이다.
이 명령은 반드시 생성자의 첫번째 문장에 와야한다.

super.맴버변수
super.맴버메소드
상속관계에 있을때 부모클래스의 맴버와 동일한 이름의 맴버를 자식클래스에 만들면
부모의 있는 동일한 맴버는 가려지게 되어 자식에서 만든 맴버가 우선 순위가 높다.
그런데 만약 부모클래스에 있는 동일한 일므에 맴버에 접근하려면 super키워드를 통해서
접근 할 수 있다.

----------------------------------------------------------------------------------------
상속과 생성자
==> 상속관계에 있을때에 지식의 객체를 생성하면
	결다른 문장이 없어도 부모의 기본 생성자가 먼저 동작하고 자식의 기본 생성자가 동작합니다.
	만약 부모의 매개변수를 갖는 생성자를 동작시키려면
	super([값])을 사용합니다.
	
calss A {

}

class B extends A {

}

위의 경우에
B ob = new B(); 처럼 객체를 생성하면
부모클래스인 A의 기본생성자가 먼저 동작하고 B의 기본생성자가 동작한다.
자바는 따로 생성자를 만들지 않으면 기본생성자를 제공한다.

-----------------------------------------------------------------------------------------
객체지향 프로그래밍의 특징
	1)은닉성
	2)상속성
	3)다형성(polymorphism)
		객체마다 받은 메세지는 동일한데 개체마다 동작하는 방식이 다르다.
		상속관계에 있을때에 부모로 부터 물려받은 메소드를 자신에게 맞도록 
		재정의 한 경우에 자식클래스의 개체마다 동작하는 방식이 다르다.
		이것을 "다형성" 이라고 한다.
		
		
SalarieEmployee e1 = new SalarieEmployee("장동건","A1001",1);
HourlyEmployee h1 = new HourlyEmployee("강재호","H0001", 100000, 20);
e1.computeSalary(); 	//A
h1.computeSalary();		//B

위의 실습코드에서 A,B에서 모두 동일한 메세지 computeSalary를 주었는데
e1은 호봉에 따라 기본금, 수당을 결정하고 기본금과 수당을 더해서 급여를 계산한다.
그러나 h1은 시간당 임금과 일한 시간을 곱하기 하여 실수령액을 계산한다.
이와같이 두개의 객체가 동일한 메세지를 받았는데 동작하는 방식이 즉 응답이 달라진다.
이것을 "다형성"이라고 합니다. 

------------------------------------------------------------------------------------------
Rectangle r = new Rectangle(10, 10, 100, 100);
Shape r = new Rectangle(10, 10, 100, 100);
Circle c = new Circle(10, 200, 50);
Shape c = new Circle(10, 200, 50);

위의 코드에서
Shape은 Rectangle과 Circle의 부모클래스이다.
부모클래스의 참조변수는 자식 클래스의 객체를 참조할 수 있다.

예를 들어, 우리가
2차원 도형이 많이 필요할때
기억장소가 많이 필요하다. 이럴때 배열을 이용하는데
그 2차원 도형은 원이 될수도 있고
사각형이 될수도 있다고 할때 
원이나 사각형을 모두 담으려면 배열의 자료형을 무엇으로 해야할까요?

이럴때에 원과 사각형을 모두 담을 수 있는
Shape으로 배열을 만들 수 있다.
