클래스변수 : 일반적으로 클래스의 맴버변수들을 객체를 생성해야지만 메모리가 확보되고
			반드시 객체를 통해서 사용할 수 있는데 만약 객체와 무관하게 사용할 공간이 필요하거나,
			모든 객체가 공동으로 사용할 메모리 공간이 필요하다면 맴버변수명 앞에 static키워드를 붙여서
			클래스변수로 만들어서 사용한다.
			객체없이 접근해야 하기 때문에 클래스이름으로 접근한다.
			
클래스 메소드 : 일반적으로 맴버메소드들은 반드시 객체를 생성하고 그 객체를 통해서 사용할 수 있다.
			만약, 객체와 무고나하게 동작시키고자 하는 기능이 있다면 메소드이름 앞에 static 키워드를 붙여서 클래스 메소드로 만들어서 사용한다.
			객체 없이도 접근해야 하기 때문에 클래스 이름으로 접근한다.
			
클래스변수와 클래스메소드는 객체 없이
클래스 이름으로 접근 할 수 있고 만약에 객체가 있다면 객체를 통해서도 접근할 수 있다.

클래스 메소드 에서는 반드시 클래스 맴버에만 접근할 수 있다.
객체를 생성해야만 사용할 수 있는 일반 맴버에는 접근할 수 없다.

----------------------------------------------------------------------------------

** 생성자 중복(Constructor Overloading)에 대하여 아는데로 설명하시오.

생성자는 클래스 이름과 같은 이름으로 메소드를 생성하는데 객체 생성시에 자동 수행되어 맴버변수들을 초기화 할 목적으로 사용한다.
이러한 생성자를 여러개 중복하여 정의 할 수 있다. 단, 매개변수의 개수와 데이터 타입이 달라야 한다.


-----------------------------------------------------------------------------------
** 메소드 중복(Method Overloading)

같은 이름의 메소드를 중복하여 정의하는 것을 말하며, 매개변수의 개수가 다르거나 자료형이 달라야 한다.

------------------------------------------------------------------------------------
	1) 은닉성(Encapsulation)
		외부로 부터 데이터(멤버변수)를 보호하는 것
			접근명시자 : private, public
	
	2) 상속성(Inheritance)
		이미 정의되어 있는 클래스를 확장하여(상속하여) 새로운 클래스를 만들 수 있다.
		코드의 재사용성을 높일 수 있다.
		
		==> 상속을 해 준 클래스를 "부모클래스", "상위클래스", "조상클래스"
		==> 상속을 받은 클래스를 "자식클래스", "하위클래스", "후손클래스"
		
--------------------------------------------------------------------------------------
class 부모클래스 {


}

class 자식클래스 extends 부모클래스 {


}

이렇게 함으로써 자식클래스는 부모클래스의 모든 속성과 동작을 물려받게 된다.
미래에 만들어질 클래스들의 공통적인 속성과 동작을 뽑아서 "일반화" 하는 것도 "상속"이라고 할 수 있다.