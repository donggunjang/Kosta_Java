update emp set comm=80 where eno=1001;
update emp set comm = 50 where eno = 1002 ;
update emp set comm = 70 where eno = 1003;
update emp set comm = 100 where eno = 1004;
update emp set comm = 70 where eno = 1005;
update emp set comm = 90 where eno= 1006;
update emp set comm = 70 where eno=1007;
update emp set comm = 77 where eno=1008;
update emp set comm = 50 where eno = 1009;
update emp set comm = 60 where eno = 1010;
update emp set comm=60 where eno=1011;
update emp set comm = 100 where eno = 1012;
update emp set comm = 110 where eno = 1013 ;
update emp set comm = 150 where eno = 1014 ;
update emp set comm = 200 where eno = 1015 ;
UPDATE emp SET comm = 99 WHERE eno = 1016;

----------------------------------------------------------------------------------

1) 사원의 이름과 직책을 출력
SELECT ename, job FROM emp;

2) 10번 부서에 근무하는 모든 직원의 이름과 급여를 출력
SELECT ename, salary FROM emp WHERE dno = 10;

2-1) '기획팀'에 근무하는 모든 직원의 이름과 급여를 출력
SELECT ename, salary
FROM emp e, dept d
WHERE e.dno = d.dno 
AND dname = '기획팀';

SELECT ename, salary 
FROM emp
WHERE dno = (SELECT dno FROM dept WHERE dname = '기획팀');

3) 모든 직원에게 급여를 10%인상하려고 한다
	사원번호, 이름, 현재급여, 증가된 급여(열 이름은 '증가액'), 10%인상된 급여(열이름은 '인상급여')
	
SELECT eno, ename, salary, (salary*0.1) 증가액, (salary*1.1) 인상급여
FROM emp;
	
4) 이름이 '김'으로 시작하는 모든 직원과 부서번호를 출력
SELECT ename, eno
FROM emp
WHERE ename LIKE '김%';

5) 모든 직원의 최대급여, 최소급여, 합계및 평균급여를 출력
SELECT MAX(salary) max, MIN(salary) min, SUM(salary) sum, AVG(salary) avg
FROM emp;

6) 직책명과 직책별로 동일한 직책의 인원수를 출력
SELECT job, COUNT(job)
FROM emp
GROUP BY job;

7) 직원의 최대급여와 최소급여의 차액을 출력
SELECT MAX(salary) - MIN(salary) 차액
FROM emp;

8) 10번 부서의 구성원수와 직원들의 급여의 합계와 평균을 출력
SELECT COUNT(eno), SUM(salary), AVG(salary)
FROM emp
WHERE dno = 10;

8-1) 종각에 근무하는 구성원수와 직원들의 급여의 합계와 평균을 출력
SELECT COUNT(eno), SUM(salary), AVG(salary)
FROM emp e, dept d
WHERE e.dno = d.dno
AND dloc = '종각';

SELECT COUNT(eno), SUM(salary), AVG(salary)
FROM emp
WHERE dno in (SELECT dno FROM dept WHERE dloc = '종각');

9) 평균급여가 가장 높은 부서번호를 출력
- 부서번호 별로 평균급여를 출력 -> A
SELECT dno, AVG(salary) avg FROM emp GROUP BY dno;

- A중에서 평균급여가 최고인 것을 찾는다 -> B
SELECT MAX(AVG(salary)) FROM emp GROUP BY dno; 

FROM (SELECT AVG(salary) FROM emp GROUP BY dno); 
- A중에서 평균 급여가 B인 부서번호를 찾는다
SELECT dno 
FROM ()
WHERE avg = ();

SELECT dno 
FROM (SELECT dno, AVG(salary) avg FROM emp GROUP BY dno)
WHERE avg = (SELECT MAX(AVG(salary)) FROM emp GROUP BY dno);



10) '대리'를 제외하고 각직책별로 총급여가 2000이상인 각 직책에 대하여
	직책명과 각 직책별 평균급여를 출력
	단, 평균급여의 내림차순으로 출력

SELECT job, SUM(salary)
FROM emp
WHERE job <> '대리'
GROUP BY job
HAVING SUM(salary) >= 2000
ORDER BY AVG(salary) DESC;
	
11) 전체직원중에 직속상관이 있는 직원의 수를 출력

SELECT COUNT(mgr) FROM emp;

12) emp테이블에서 이름,급여,수당,실수령액을 구하여 실수령액이 높은 순서대로 출력하시오.
	단, comm이 null인 사람은 제외한다.
	
SELECT ename, salary, comm, salary+comm 실수령액
FROM emp
WHERE comm is not null
ORDER BY 실수령액 DESC;

SELECT ename, salary, comm, salary+NVL(comm, 대체값) 실수령액
FROM emp

SELECT AVG(salary) FROM emp WHERE dno = 10;

SELECT ename, salary, comm, salary+NVL(comm, 
(SELECT AVG(salary) FROM emp WHERE dno = 10)) 실수령액
FROM emp

SELECT ename, salary, comm, salary+NVL(comm, 
		(SELECT AVG(comm) FROM emp e2 WHERE e1.dno = e2.dno )) 실수령액
FROM emp e1;
	
13) 각 부서별로 같은 직책의 사람의 인원수를 구하여 부서번호, 직책이름, 인원수를 출력

SELECT dno, job, COUNT(eno)
FROM emp
GROUP BY dno, job;

SELECT (SELECT dname FROM dept d WHERE d.dno = e.dno) dname, job, COUNT(eno)
FROM emp e
GROUP BY dno, job;

14) 사원이 한명도 없는 부서의 이름을 출력
SELECT dname
FROM dept d LEFT OUTER JOIN emp e
ON d.dno = e.dno
WHERE ename IS NULL;

SELECT dname
FROM dept
WHERE dno not in (SELECT DISTINCT dno FROM emp);

SELECT dname
FROM dept d LEFT OUTER JOIN emp e
ON d.dno = e.dno
GROUP BY dname
HAVING COUNT(eno) =0;

15) 같은 직책을 하는 사람의 수가 2명이상인 직책과 인원수를 출력
SELECT job, COUNT(eno)
FROM emp
GROUP BY job
HAVING COUNT(eno) >=2;

16) 사원번호가 1002~1010 이하인 직원의 이름을 출력
SELECT ename
FROM emp
WHERE eno BETWEEN 1002 AND 1010;

17) 직원의 이름과 부서명을 출력
SELECT ename, dname
FROM emp e, dept d
WHERE e.dno = d.dno;

SELECT ename,(SELECT dname FROM dept d WHERE e.dno = d.dno) dname
FROM emp e;

18) 직원의 이름과 관리자 이름을 출력
SELECT e.ename, m.ename
FROM emp e, emp m
WHERE e.mgr = m.eno;

SELECT ename, (SELECT ename FROM emp m WHERE e.mgr = m.eno) mgr
FROM emp e;

19) '박규희' 보다  급여를 많이 받는 사람의 이름을 출력
SELECT ename
FROM emp
WHERE salary > (SELECT salary FROM emp WHERE ename = '박규희');

20) '박규희'가 일하는 부서번호 혹은 '가산'에 있는 부서번호를 출력
SELECT dno
FROM dept
WHERE dno in (SELECT dno FROM emp WHERE ename = '박규희')
OR dloc = '가산';

MINUS ==> 앞에 조회한 결과에서 뒤에 조회한 결과를 빼준다.
UNION ==> 앞에 조회결과에 뒤의 조회결과를 합쳐준다.

SELECT dno FROM emp WHERE ename = '박규희'
UNION
SELECT dno FROM dept WHERE dloc ='가산';

SELECT DISTINCT d.dno 
FROM emp e RIGHT OUTER JOIN dept d 
ON d.dno = e.dno 
WHERE ename = '박규희' OR dloc = '가산';

21) '박규희'가 일하는 동일한 근무지에 근무하는 사람의 이름을 출력
-박규희가 일하는 근무지 출력
SELECT dloc FROM emp e, dept d
WHERE e.dno = d.dno AND ename = '박규희';

-근무지가 '종각'(박규희 근무지)에 근무하는 사람의 이름
SELECT ename, dloc
FROM emp e, dept d
WHERE e.dno = d.dno
AND dloc = (SELECT dloc FROM emp e, dept d
WHERE e.dno = d.dno AND ename = '박규희');

--------------------------------------------------------------------------------

데이터 정의어(DDL)
- 테이블의 구조를 생성(CREATE) 수정(ALTER)	삭제(DROP)
- AUTO COMMIT
<< 테이블 생성하기>>
CREATE TABLE 테이블이름(
	속성이름1 자료형 [제약(들)],
	속성이름2 자료형 [제약(들)],
	...
);

<< 제약의 종류 >>
NULL			null을 허용할 수 있다(기본값)
NOT NULL		null을 허용할 수 없다
UNIQUE			유일값
DEFAULT			생략하면 설정된 기본값을 사용
CHECK			들어갈수 있는 값의 조건을 설정
PRIMARY KEY		주식별자를 설정
FOREIGN KEY		참조키를 설정(부모와 자식의 관계를 설정)

CREATE TABLE newbook(
	bookid NUMBER,
	bookname VARCHAR2(20),
	publisher VARCHAR2(20),
	price NUMBER
);

<< 데이터의 추가 >>
INSERT INTO 테이블이름 VALUES(값1,값2,..);
==> 값의 수와 순서는 테이블의 구조와 동일해야함

INSERT INTO 테이블이름(컬럼1,컬럼2,..) VALUES(값1,값2);
==> 나열한 컬럼의 순서대로 값을 써 주어야 한다.

INSERT INTO newbook VALUES(1, '재미있는자바', '코스타미디어', 30000);
INSERT INTO newbook VALUES(2, '신나는자바', null, null);
INSERT INTO newbook(bookname, bookid, price, publisher) 
				VALUES('신나는 오라클', 3, 35000, '한빛미디어');
INSERT INTO newbook(bookid, bookname)
			VALUES(4, '신나는 스프링');
INSERT INTO newbook(bookid) VALUES(4);

DDL과 DCL은 자동 커밋이 되기 때문에 ROLLBACK을 할 수 없다.

----------------------------------------------------------------------------
연습) 책번호와 가격만 갖고 레코들르 추가
INSERT INTO newbook(bookid,price) VALUES(5,50000);
INSERT INTO newbook VALUES(6, null, null, 40000);

<< 테이블의 삭제 >>
DROP TABLE 테이블이름;


<< NOT NULL의 제약 >>
 ==> 값을 생략할 수 없음

도서번호, 도서명 에 NOT NULL 제약을 주어 테이블을 만들고 
레코드를 추가하여 테스트 해 봅니다.

CREATE TABLE newbook(
	bookid NUMBER NOT NULL,
	bookname VARCHAR2(20) NOT NULL,
	publisher VARCHAR2(20),
	price NUMBER
);	

INSERT INTO newbook VALUES(1, '재미있는 자바', '코스타 미디어', 30000);
INSERT INTO newbook VALUES(1, '재미있는 자바',null,null);
INSERT INTO newbook(bookid, bookname) VALUES(1, '재미있는 자바');

책번호와 가격만 갖고 레코드를 추가 해 봅시다.
INSERT INTO newbook(bookid, price) VALUES(1,30000);
*
1행에 오류:
ORA-01400: NULL을 ("C##MDANG"."NEWBOOK"."BOONAME") 안에 삽입할 수 없습니다

<< UNIQUE 제약 >>
값의 중복을 허용하지 않는다.

연습) 도서번호에 UNIQUE 제약을 설정하여 테이블을 생성하고
	다양한 레코드를 추가하여 테스트 해봅시다.
	
CREATE TABLE newbook(
	bookid NUMBER UNIQUE,
	bookname VARCHAR2(20) ,
	publisher VARCHAR2(20),
	price NUMBER
);	

INSERT INTO newbook VALUES(1, '재밌있는 자바', '코스타 미디어', 30000);
INSERT INTO newbook VALUES(1, '재밌있는 자바', '코스타 미디어', 30000);
*
1행에 오류:
ORA-00001: 무결성 제약 조건(C##MDANG.SYS_C008362)에 위배됩니다

	NOT NULL 	==>		 
	
	UNIQUE		==> 	유일한 값인지만 판별하고
						NULL을 허용

<< PRIMARY KEY >>
NOT NULL과 UNIQUE를 합쳐 놓은 것
다른 레코드와 구별하기 위하여 식별자를 설정하기 위하여 사용

CREATE TABLE newbook(
	bookid NUMBER PRIMARY KEY,
	bookname VARCHAR2(20) ,
	publisher VARCHAR2(20),
	price NUMBER
);	


연습) 도서번호에 중복된 레코드를 추가 해 보자.
INSERT INTO newbook VALUES(1, '재밌있는 자바', '코스타 미디어', 30000);
INSERT INTO newbook VALUES(1, '재밌있는 자바', '코스타 미디어', 30000);
1행에 오류:
ORA-00001: 무결성 제약 조건(C##MDANG.SYS_C008363)에 위배됩니다

연습) 도서번호에 NULL을 설정하여 레코드를 추가
INSERT INTO newbook VALUES(null, '재밌있는 자바', '코스타 미디어', 30000);                 *
1행에 오류:
ORA-01400: NULL을 ("C##MDANG"."NEWBOOK"."BOOKID") 안에 삽입할 수 없습니다

CREATE TABLE newbook(
	bookid NUMBER PRIMARY KEY,
	booname VARCHAR2(20) NOT NULL,
	publisher VARCHAR2(20) NULL,
	price NUMBER
);	

INSERT INTO newbook(bookid, bookname) VALUES(1, '재미있는 자바');

<< DEFAULT 제약 >>

CREATE TABLE newbook(
	bookid NUMBER PRIMARY KEY,
	bookname VARCHAR2(20) NOT NULL,
	publisher VARCHAR2(20) DEFAULT '코스타미디어',
	price NUMBER 
);	

INSERT INTO newbook VALUES(1, '재미있는 자바', '한빛미디어',5000);
INSERT INTO newbook VALUES(2, '신나는자바', DEFAULT, 5000);
INSERT INTO newbook(bookid, bookname) VALUES(3, '재미있는 자바');

BOOKID BOOKNAME             PUBLISHER                       PRICE
------ -------------------- -------------------------------	--------
     1 재미있는 자바        한빛미디어                             5,000
     2 신나는자바           코스타미디어                           5,000
     3 재미있는 자바        코스타미디어
     
<< CHECK >>     
==> 컬럼의 값에 대하여 
    
CREATE TABLE newbook(
	bookid NUMBER PRIMARY KEY,
	bookname VARCHAR2(20) NOT NULL,
	publisher VARCHAR2(20) DEFAULT '코스타미디어',
	price NUMBER CHECK (price >= 1000)
);	

INSERT INTO newbook VALUES(1, '재미있는자바', DEFAULT, 5000);
INSERT INTO newbook VALUES(2, '신나는자바', DEFAULT, 500);
*
1행에 오류:
ORA-02290: 체크 제약조건(C##MDANG.SYS_C008373)이 위배되었습니다


-------------------------------------------------------------------
연습) 다음의 조건을 만족하도록 체크제약을 설정하여 newbook 테이블을 만들고 레코드를 추가 해 봅시다.
도서의 가격은 10000~50000원 으로 제한
출판사는 '삼성당', '코스타미디어','한빛미디어'로 제한

CREATE TABLE newbook(
	bookid NUMBER PRIMARY KEY,
	bookname VARCHAR2(20) NOT NULL,
	publisher VARCHAR2(20) CHECK (publisher in('삼성당','코스타미디어','한빛미디어')),
	price NUMBER CHECK (price BETWEEN 10000 AND 50000)
);

INSERT INTO newbook VALUES(1, '재미있는 자바','코스타미디어', 15000);
INSERT INTO newbook VALUES(2, '신나는 스프링','한빛미디어', 25000);
INSERT INTO newbook VALUES(3, '골프의 정석','삼성당', 13000);
INSERT INTO newbook VALUES(4, 'PGA 가이드','삼성당', 40000);
INSERT INTO newbook VALUES(5, '컴퓨터 구조','한빛미디어', 50000);
INSERT INTO newbook VALUES(6, 'CS전공노트','코스타미디어', 40000);
INSERT INTO newbook VALUES(7, '코스타서적','코스타미디어', 45000);

INSERT INTO newbook VALUES(8, '마케팅 비결','인스타미디어', 45000);
*
1행에 오류:
ORA-02290: 체크 제약조건(C##MDANG.SYS_C008376)이 위배되었습니다

INSERT INTO newbook(bookid, bookname) VALUES(8, '파이썬');

==> null 은 허용
==> 값이 들어올 때에 조건을 만족하는지 판별한다.

-------------------------------------------------------------------------
연습) 다음의 조건을 만족하는 newbook테이블을 만들고 테스트를 해봅니다.
- 가격을 생략할 수 없고 10000 ~ 50000으로 제한
- 출판사는 생략할 수 없고 기본값 '삼성당'
  값의 종류는 '삼성당', '코스타미디어','대한미디어'로 제한

CREATE TABLE newbook(
	bookid NUMBER PRIMARY KEY,
	bookname VARCHAR2(20) NOT NULL,
	publisher VARCHAR2(20) DEFAULT '삼성당' 
	CHECK (publisher in('삼성당','코스타미디어','대한미디어')),
	price NUMBER CHECK (price BETWEEN 10000 AND 50000) NOT NULL
);

INSERT INTO newbook VALUES(1, '재미있는 자바','코스타미디어', 15000);
INSERT INTO newbook VALUES(2, '신나는 스프링', DEFAULT, 25000);
INSERT INTO newbook(bookid, bookname,price) VALUES(8, '파이썬',20000);
INSERT INTO newbook(bookid, bookname) VALUES(8, '파이썬');
1행에 오류:
ORA-01400: NULL을 ("C##MDANG"."NEWBOOK"."PRICE") 안에 삽입할 수 없습니다

BOOKID BOOKNAME             PUBLISHER                             PRICE
------ -------------------- ---------------------------------------- --------
     8 파이썬               삼성당                                     20,000
     1 재미있는 자바       	 코스타미디어                               15,000
     2 신나는 스프링        삼성당                                     25,000
     

-------------------------------------------------------------------------------

**테이블 생성시에 설정 할 수 있는
제약의 종류를 나열하고 각각에 대하여 설명

NULL		컬럼 값에 NULL 허용
NOT NULL	컬럼 값에 NULL을 허용 안함
UNIQUE		유일값이여야 한다
PRIMARY KEY	다른 레코드와 구별하기 위한 식별자,
		NULL을 허용 안하고 유일값이여야 한다.
FORIEGN KEY	참조키, 관계를 위해 사용
DEFAULT		컬럼값의 기본값을 설정 기본값
CHECK		컬럼값이 만족해야 하는 조건 설정


CREATE TABLE newbook(
	bookid NUMBER PRIMARY KEY,
	bookname VARCHAR2(50) NOT NULL,
	publisher VARCHAR2(20),
	price NUMBER
);

CREATE TABLE newcustomer(
	custid NUMBER PRIMARY KEY,
	name VARCHAR2(20),
	addr VARCHAR2(20),
	phone VARCHAR2(20)
);

CREATE TABLE neworders(
	orderid	 NUMBER PRIMARY KEY,
	bookid NUMBER,					<--- 참조키를 설정하지 않았다.
	custid NUMBER,					<--- 참조키를 설정하지 않았다.
	saleprice NUMBER,
	orderdate DATE
);

=> 이렇게 테이블을 만들면 존재 하지 않는 도서나 고객의 주문이 생기는 경우가 발생
     
book 테이블의 모든 레코드를 조회하여 newbook에 insert 하기
INSERT INTO newbook SELECT bookid, bookname, pubhlisher, price FROM book;

customer 테이블의 모든 레코드를 조회하여 newcustomer에 insert 하기
INSERT INTO newcustomer SELECT *FROM customer;