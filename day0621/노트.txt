months_between(날짜1, 날짜2)
==> 두 날짜 사이의 개월수를 반환합니다.
==> 날짜1이 더 최근의 날짜여야 함.

연습) 근무개월수가 60개월 이상인 직원들에게
	특별휴가를 주려고 한다.
	대상자의 사원번호,사원이름, 부서명
	입사일, 근무개월, 주민번호를 출력하시오.
	주민번호는 14자리를 잡아서 출력하되 성별까지만 출력하고
	오른쪽 빈칸은 *로 표시합니다.
	근무개월수가 높은순으로 출력하고 동일할 때에는 이름순으로 출력.
	
SELECT eno, ename,(SELECT dname FROM dept d WHERE d.dno = e.dno) 
		dname, hiredate, 
		round(months_between(sysdate, hiredate)) 근무개월,
		rpad(substr(jumin,1,8),14, '*') jumin
FROM emp e
WHERE months_between(sysdate, hiredate) >= 60
ORDER BY 근무개월 DESC, ename;

--------------------------------------------------------------------------------------

<< null에 대한 처리 >>
==> 값이 정해지지 않은 상태를 null이라고 한다.
==> null인 상태에서는 어떠한 연산이나 함수를 사용할 수 없다.
==> null인지 판별하기 위해서는 is null 연산자를 이용한다.
==> null이 아닌지 판별하기 위해서는 is not null 연산자를 사용
==> 해달 레코드가 없을때 count를 제회한 집계함수의 결과는 null이다.
==> null인 경우 다른값으로 대체 하기 위해 NVL 함수를 이용한다.
	NVL(컬럼, 값)
	
CREATE TABLE test(
	title VARCHAR2(20),
	cnt NUMBER
);

SELECT MAX(cnt) FROM test;		NULL
SELECT MIN(cnt) FROM test;		NULL
SELECT SUM(cnt) FROM test;		NULL
SELECT AVG(cnt) FROM test;		NULL
SELECT COUNT(cnt) FROM test;	0

--------------------------------------------------------------------------------------

<< 시퀀스 >>
다른 레코드와 구별할 순번을 위하여
1부터 1씩 차례로 증가하는 값을 위하여 사용한다.

<< 시퀀스 만들기 >>
CREATE SEQUENCE 시퀀스이름 [STRAT WITH 값 INCREMENT BY 값 MAXVALUE 값]
==> 시작값, 증감값을 생략 하면 1입니다.
==> 최대값을 생략하면 시스템이 허용하는데 까지 발행할 수 있다.

<< 시퀀스 사용하기 >>
시퀀스이름.nextval


CREATE TABLE board(
	no NUMBER PRIMARY KEY,
	title VARCHAR2(50),
	writer VARCHAR2(20),
	content VARCHAR2(3000),
	regdate DATE
);
CREATE SEQUENCE seq_board START WITH 1 INCREMENT BY 1;

----------------------------------------------------------------------------------------
INSERT INTO board VALUES(seq_board.nextval, '금요일','변시우','금요일 입니다.',sysdate);
INSERT INTO board VALUES(seq_board.nextval, '프로젝트','임유나','화이팅 합시다.',sysdate);

INSERT INTO board VALUES(seq_board.nextval, '중국집','메뉴 추천 내가 한다 장동건이다 다들 조심해라','감기 조심하세요');
INSERT INTO board VALUES(seq_board.nextval, '중국집','메뉴 추천 내가 한다 장동건이다 다들 조심해라','감기 조심하세요')
            *
1행에 오류:
ORA-00947: 값의 수가 충분하지 않습니다
==> INSERT는 실패 했지만, 시퀀스는 발행 됌

INSERT INTO board VALUES(seq_board.nextval, '점심','이재원','뭐먹지.',sysdate);
INSERT INTO board VALUES(seq_board.nextval, '감기','박규희','조심하세요.',sysdate);

   NO TITLE           WRITER     CONTENT              REGDATE
----- --------------- ---------- -------------------- ----------
   22 감기            박규희     조심하세요.          24/06/21
    1 금요일          변시우     금요일 입니다.       24/06/21
    2 프로젝트        임유나     화이팅 합시다.       24/06/21
   21 점심            이재원     뭐먹지.              24/06/21

==> 시퀀스는 다른 레코드와 구별하기 위한 용도로 사용함.
==> 위의 결과 처럼 INSERT는 실패하엿으나 시퀀스는 새로운 번호를 발행할 수 있다.
	그래서 데이터가 꼭 순서대로 번호가 들어가지 않을 수 있다.
	만약, 꼭 순서대로 번호를 매겨야 한다면
	프로그램으로 처리 한다.
	MAX함수를 사용하여 +1 한다음 그것을 새로운 번호로 사용
	
----------------------------------------------------------------------------------------

ROWNUM
	==> SELECT 문으로 조회한 결과에 대하여
		차례대로 행번호를 붙이기 위하여 사용하는 속성 
		
연습) 개발팀에 근무하는 모든 직원들의 사원번호, 이름을 출력
	출력결과에 행번호를 붙여서 출력
SELECT ROWNUM, eno, ename
FROM emp e, dept d
WHERE e.dno = d.dno
AND dname LIKE '개발%';

연습) '박지성' 고객이 주문한 도서이름과 가격을
	행번호를 붙여서 출력 해 봅시다.
	
SELECT ROWNUM,
		(SELECT bookname FROM book b WHERE b.bookid = o.bookid) bookname,
 		saleprice
FROM orders o
WHERE custid in (SELECT custid FROM customer WHERE name = '박지성'); 

SELECT ROWNUM, bookname, price
FROM book
WHERE bookid in (SELECT bookid FROM orders WHERE custid = (
SELECT custid FROM customer WHERE name = '박지성')); 
   
연습) '박지성' 고객이 주문한 도서이름과 가격을
	행번호를 줕여서 출력 해 봅시다.
	(단, 2권만 출력)

SELECT ROWNUM, bookname, price
FROM book
WHERE bookid in (SELECT bookid FROM orders WHERE custid = (
SELECT custid FROM customer WHERE name = '박지성'))
AND ROWNUM <=2;

연습) 가장 비싼 도서 3권을 출력 합니다.
SELECT * FROM book WHERE price IS NOT NULL ORDER BY price DESC;

SELECT ROWNUM, book.*					가
FROM book 								나
WHERE price IS NOT NULL AND ROWNUM 		다
ORDER BY price DESC;					라

나 -> 다 -> 가 -> 라

==> 정렬을 먼저 시켯서 그것을 FROM 절에 서브쿼리로 하여
	행 정보를 붙여서 갖고 와야 한다.

SELECT ROWNUM,b.*
FROM (SELECT * FROM book WHERE price IS NOT NULL ORDER BY price DESC) b
WHERE ROWNUM <=3; 

  ROWNUM BOOKID BOOKNAME                PRICE PUBHLISHER
---------- ------ -------------------- -------- --------------------
         1      7 골프 교본              	33,000 탈골스윙
         2      8 PGA프로                30,000 로리 맥길로이
         3     12 즐거운 축구교실       		25,000 코스타미디

<< 가격이 높은 순으로 3~5번째 사이의 도서를 출력 >>
SELECT ROWNUM,b.*
FROM (SELECT * FROM book WHERE price IS NOT NULL ORDER BY price DESC) b
WHERE ROWNUM BETWEEN 3 AND 5 ;

조회한 결과(가상의 테이블)에 행번호인 ROWNUM을 붙여서
앞에서 부터 순차적으로 갖고 오는 것은 잘 되지만
중간에 있는 일부분을 갖고 오는 것은 불가능 하다.
중간에 일부분을 갖고 오기 위해선 행번호 붙인것을 다시 FROM 절에 서브쿼리로 만들면 가능하다

<< 가격이 높은 순으로 3~5번째 사이의 도서를 출력 >>
SELECT * FROM book ORDER BY price DESC		==> A

SELECT ROWNUM n, b.*						==> B
FORM ( A ) b

SELECT * 
FROM (SELECT ROWNUM n, b.* FROM 
(SELECT * FROM book WHERE price IS NOT NULL ORDER BY price DESC) b) 
WHERE n BETWEEN 3 AND 5;

연습) '개발'팀에 근무하는 직책이 '사원'인 직원들 중에
	실수령액이 가장 높은 직원 2명에 대한
	사원번호, 사원명, 실수령액, 부서번호, 부서명, 관리자명을 행번호를 붙여 출력
	
SELECT eno, ename, (salary + NVL(comm,0)) salary, dno,
	(SELECT dname FROM dept d WHERE e.dno = d.dno) dname,
	(SELECT m.ename FROM emp m WHERE e.mgr = m.eno) mgr
FROM emp e
WHERE dno in (SELECT dno FROM dept WHERE dname LIKE '개발%') 
AND job = '사원'
ORDER BY salary DESC;				<=== A
---------------------------------------------------------------------------------------
SELECT ROWNUM, a.*
FROM (SELECT eno, ename, job, (salary + NVL(comm,0)) salary, dno,
	(SELECT dname FROM dept d WHERE e.dno = d.dno) dname,
	(SELECT m.ename FROM emp m WHERE e.mgr = m.eno) 관리자
FROM emp e
ORDER BY salary DESC) a
WHERE dname LIKE '개발%'
AND job = '사원'
AND ROWNUM <=2;
----------------------------------------------------------------------------------------
SELECT ROWNUM, a.*
FROM (SELECT eno, ename, (salary + NVL(comm,0)) salary, dno,
	(SELECT dname FROM dept d WHERE e.dno = d.dno) dname,
	(SELECT m.ename FROM emp m WHERE e.mgr = m.eno) mgr
FROM emp e
WHERE dno in (SELECT dno FROM dept WHERE dname LIKE '개발%') 
AND job = '사원'
ORDER BY salary DESC) a
WHERE ROWNUM <=2;

연습) 판매량이 가장 높은 도서정보 두권을 출력하시오.

- orders 테이블로 부터 도서번호 별로 판매건수를 팬매건수 순으로 출력
SELECT bookid , COUNT(*)
FROM orders
GROUP BY bookid						<--A
ORDER BY COUNT(*) DESC;

SELECT ROWNUM, o.*
FROM (SELECT bookid , COUNT(*)
FROM orders
GROUP BY bookid
ORDER BY COUNT(*) DESC) o
WHERE ROWNUM <=2;					<--B
-------------------------------------------------------------------------------
SELECT * 
FROM book
WHERE bookid in (SELECT bookid
FROM (SELECT bookid , COUNT(*)
FROM orders
GROUP BY bookid
ORDER BY COUNT(*) DESC) o
WHERE ROWNUM <=2);

연습) 판매량이 가장  높은 두권의 도서 정보를 출력 하시오.

- orders 테이블로 부터 도서번호 별로 판매건수를 팬매건수 순으로 출력
SELECT bookid , COUNT(*) cnt
FROM orders
GROUP BY bookid
ORDER BY cnt DESC;				<-- A

SELECT bookid
FROM (SELECT bookid , COUNT(*) cnt
FROM orders
GROUP BY bookid
ORDER BY cnt DESC)
WHERE ROWNUM <= 2;				<-- B

SELECT * FROM book
WHERE bookid in (B);

SELECT * FROM book
WHERE bookid in (SELECT bookid
FROM (SELECT bookid , COUNT(*) cnt
FROM orders
GROUP BY bookid
ORDER BY cnt DESC)
WHERE ROWNUM <= 2);

------------------------------------------------------

BOOKID        CNT
------ ----------
     4          3
     6          2
     5          2
     7          1
     8          1
     9          1
     2          1
    10          1
     1          1
     3          1
     
판매량 순으로 정렬했을때에 2번째 판매량은 2권이다.
2번째 판매량 보다 크거나 같은 모든 도서를 출력.

- 도서번호별로 판매량을 출력
SELECT bookid, count(*) cnt
FROM orders
GROUP BY bookid
ORDER BY cnt DESC;						<--A

-A의 결과에 행번호를 붙여서 2번째 행의 cnt를 출력
SELECT cnt
FROM (A)
WHERE ROWNUM <= 2;						<-- 가능

 SELECT cnt
FROM (A)
WHERE ROWNUM <= 2;						<-- 불가능

- 정렬한 것에다가 다시 서브쿼리를 사용해야 한다.
SELECT ROWNUM, b.* 
FROM (A) ;

SELECT ROWNUM n, b.* 
FROM (SELECT bookid, count(*) cnt
FROM orders
GROUP BY bookid
ORDER BY cnt DESC) b					<--C

SELECT cnt FROM (SELECT ROWNUM n, b.* 
FROM (SELECT bookid, count(*) cnt
FROM orders
GROUP BY bookid
ORDER BY cnt DESC) b)					<--D
WHERE n = 2;							<-- 판매량 순으로 정렬 했을때 
											2번째 행에 있는 판매량

- 도서번호별로 판매량 중에서 판매량이 D보다 크거나 같은 도서번호를 조회
SELECT bookid
FROM (A)
WHERE cnt >= (D);

SELECT bookid
FROM (SELECT bookid, count(*) cnt
FROM orders
GROUP BY bookid
ORDER BY cnt DESC)
WHERE cnt >= (SELECT cnt FROM (SELECT ROWNUM n, b.* 
FROM (SELECT bookid, count(*) cnt
FROM orders
GROUP BY bookid
ORDER BY cnt DESC) b)
WHERE n = 2);					<--E

SELECT *FROM book
WHERE bookid in (SELECT bookid
FROM (SELECT bookid, count(*) cnt
FROM orders
GROUP BY bookid
ORDER BY cnt DESC)
WHERE cnt >= (SELECT cnt FROM (SELECT ROWNUM n, b.* 
FROM (SELECT bookid, count(*) cnt
FROM orders
GROUP BY bookid
ORDER BY cnt DESC) b)
WHERE n = 2));

BOOKID BOOKNAME                PRICE PUBHLISHER
------ -------------------- -------- --------------------
     4 그렇게 안높아          24,000 손흥민
     5 남자는 뭐              10,000 자신감
     6 골프 바이블            19,000 탈골스윙

연습) 실수령액이 높은 순으로 하였을때 5~10번째 직원의 이름을 출력

SELECT ename, (salary + NVL(comm, 0)) salary
FROM emp
ORDER BY salary DESC;

SELECT ROWNUM r, T.*
FROM (SELECT ename, (salary + NVL(comm, 0)) salary
FROM emp
ORDER BY salary DESC) T;

SELECT ename
FROM (SELECT ROWNUM r, T.*
FROM (SELECT ename, (salary + NVL(comm, 0)) salary
FROM emp
ORDER BY salary DESC) T)
WHERE r BETWEEN 5 AND 10;
ENAME
----------
김예은
장동건
공희상
최모래
박준수
홍길동
     
---------------------------------------------------------------------------------------

서브쿼리 
	==> SQL문 안에 포함되는 또 다른 SQL 문을 말한다.
	
서브쿼리 위치
	- SELECT 절	스칼라 서브쿼리
	- FROM 절 	인라인 뷰
	- WHERE 절	중첩쿼리
	
--------------------------------------------------------------------------------------

<< 스칼라 서브쿼리 >>
	SELECT 절에 컬럼이름 오는 곳에 사용되는 서브쿼리를 말한다.
	단일행이 오도록 표현해야 한다.
	(메인쿼리와 서브쿼리 조건식이 필요! ==> 상관서브쿼리)
	
연습) 고객별 고객아이디, 이름, 총주문금액을 출력

SELECT custid, SUM(saleprice)
FROM orders
GROUP BY custid;

CUSTID SUM(SALEPRICE)
------ --------------
     4          75800
     3          58000
     2          25000
     1          43000
     5          45000

==> 주문에 대한 내역은 orders에 있고


SELECT custid
, (SELECT name FROM customer c WHERE c.custid = o.custid  ) name 
, SUM(saleprice)
FROM orders o
GROUP BY custid;

CUSTID NAME       SUM(SALEPRICE)
------ ---------- --------------
     4 로리 맥길           75800
       로이

     3 이강인              58000
     2 손흥민              25000
     1 박지성              43000
     5 박세리              45000

==> 서브쿼리 조건식이 있어
	     
-------------------------------------------------------------------------------------
연습) 스칼라서브쿼리를 이용하여 도서명별 판매건수를 출력한다.
SELECT 
(SELECT bookname FROM book b WHERE b.bookid = o.bookid) bookname
, count(*)
FROM orders o
GROUP BY o.bookid;

연습) 스칼라서브쿼리를 이용하여
	부서별로 근무자의 수, 평균급여, 최고급여를 출력
	
SELECT (SELECT dname FROM dept d WHERE d.dno = e.dno) dname
, count(*)
, AVG(salary)
, MAX(salary)
FROM emp e
GROUP BY dno;

<< UPDATE 문에 사용되는 스칼라 서브쿼리 >>
UPDATE 테이블명 SET 컬럼명 = 값 [WHERE ~]
UPDATE 테이블명 SET 컬럼명 = (SELECT ~) [WHERE ~]

-----------------------------------------------------------------------------------
자료(레코드)의 수정	: UPDATE  
테이블 구조 수정		: ALTER 
-----------------------------------------------------------------------------------

실습을 위하여 orders 테이블에 bookname 칼럼을 추가 합니다.
ALTER TABLE orders ADD bookname VARCHAR2(20);

UPDATE orders o SET bookname = (SELECT bookname FROM book b WHERE b.bookid = o.bookid);

연습) orders 테이블의 bookname 컬럼을 삭제
ALTER TABLE orders DROP column bookname; 

------------------------------------------------------------------------------------

<< 인라인 뷰 >>
==> 서브쿼리가 FROM 절에 오는 경우를 말한다.
==> 실제로는 존재하지 않는 SELECT한 결과를 가상의 테이블(VIEW)라고 한다

연습) 판매수량이 가장 높은 상위 3개의 도서의 정보를 출력

SELECT bookid, COUNT(*)
FROM orders 
GROUP BY bookid
ORDER BY COUNT(*) DESC;				<--A 

SELECT bookid
FROM (SELECT bookid, COUNT(*)
FROM orders 						<-- A 가상의 테이블
GROUP BY bookid
ORDER BY COUNT(*) DESC) b
WHERE ROWNUM <= 3;					<-- B

SELECT *
FROM book
WHERE bookid in (SELECT bookid
FROM (SELECT bookid, COUNT(*)
FROM orders 
GROUP BY bookid
ORDER BY COUNT(*) DESC) b
WHERE ROWNUM <= 3);



------------------------------------------------------------------------------------
연습) 급여가 가장 낮은 5명의 직원에게 특별 상여금을 지급하려고 한다.
	대상자의 사원번호, 사원명, 상여금을 출력합니다.
	상여금은 급여의 100%입니다.
	
SELECT eno, ename, salary
FROM emp
ORDER BY salary;					<-- A

SELECT eno, ename, (salary *1) 상여금
FROM 
(
SELECT eno, ename, salary
FROM emp							<-- A 인라인 뷰
ORDER BY salary
)
WHERE ROWNUM <= 5;

연습) 오늘날짜에 가장 많이 판매된 도서의 2권의 정보를 출력 해 봅시다.

SELECT bookid, COUNT(*) cnt
FROM orders
WHERE to_char(orderdate,'yy/mm/dd')  = to_char(sysdate, 'yy/mm/dd')
GROUP BY bookid
ORDER BY cnt DESC;			<-- A
------------------------------------------------------------------------------------
SELECT ROWNUM, bookid
FROM
(
SELECT bookid, COUNT(*) cnt
FROM orders
WHERE to_char(orderdate,'yy/mm/dd')  = to_char(sysdate, 'yy/mm/dd')		<--A
GROUP BY bookid		
ORDER BY cnt DESC
)
WHERE ROWNUM <= 2;
							<-- B
---------------------------------------------------------------------------------
SELECT
*
FROM book
WHERE bookid in 
(
SELECT bookid
FROM
(
SELECT bookid, COUNT(*) cnt
FROM orders
WHERE to_char(orderdate,'yy/mm/dd')  = to_char(sysdate, 'yy/mm/dd')
GROUP BY bookid
ORDER BY cnt DESC  			<-- B
)
WHERE ROWNUM <= 2);


-----------------------------------------------------------------------------------
서브쿼리 
	==> SQL문 안에 포함되는 또 다른 SQL 문을 말한다.
	
서브쿼리 위치
	- SELECT 절	스칼라 서브쿼리
	- FROM 절 	인라인 뷰
	- WHERE 절	중첩쿼리

---------------------------------------------------------------------------------

<< 중첩 쿼리 >>
==> 서브쿼리가 WHERE 절에 오는 경우를 말한다.
	
	이때 서브쿼리의 건수가 단일행인지 아닌지에 따라
	단일행 연산자, 다중행연산자를 구분하여 사용해야 한다.
	
	=, >, <, >=, <= 연산자는 단일행 연산자이며
	서브쿼리의 건수가 한건(단일행)일때 사용할 수 있다.
	
	SELECT ~~~
		FROM ~~
		WHERE 컬럼 > (SELECT ~~)
		
	서브쿼리의 건수가 여러건(다중행)일 때에는
		= 대신에 in을 써야하고
	
	>, <, >=, <=는 ANY(some), all과 같이 사용해야한다.
	또, 서브쿼리의 건수가 있는지 없는지만 판단하려면 
		exist, not exist를 사용합니다.
	
	<< 다중행 연산자 >>
	서브쿼리의 건수가 여러건일때 사용하는 연산자를 말하며
	in, any(some), all, exist등이 있습니다.
	
연습) 평균주문금액을 조회
SELECT AVG(saleprice)
FROM orders;

연습) 평균주문금액 이하의 주문에 대하여 주문번호, 주문금액을 출력
SELECT orderid, saleprice
FROM orders
WHERE saleprice <= (SELECT AVG(saleprice) FROM orders);

연습) 대한민국에 거주하는 고객의 아이디를 출력
SELECT custid 
FROM customer
WHERE address LIKE '대한민국%';

연습) 대한민국에 거주하는 고객의 총주문금액을 출력
    SELECT SUM(SALEPRICE)
    FROM ORDERS
    WHERE CUSTID = (SELECT CUSTID FROM CUSTOMER
        WHERE ADDRESS LIKE('대한민국%'));
    => 서브쿼리의 건수가 여러건일 때에 단일행 연산자인 = 를 사용할 수 없고 IN 을 사용해야 함
    ORA-01427: 단일 행 하위 질의에 2개 이상의 행이 리턴되었습니다.
    
    SELECT SUM(SALEPRICE)
            FROM ORDERS
            WHERE CUSTID IN (SELECT CUSTID FROM CUSTOMER
                WHERE ADDRESS LIKE('대한민국%'));

연습) 4번 고객이 주문한 모든 주문 금액보다 더 비싼 도서를
	구입한 주문의 주문번호와 금액을 출력
	
SELECT saleprice FROM orders WHERE custid = 4;

 SALEPRICE
----------
     23000
     10000
     25000
     17800
     
==> 4번고객이 주문한 목록
	
SELECT orderid, saleprice
FROM orders
WHERE saleprice > ALL(SELECT saleprice FROM orders WHERE custid = 4);
				==> 서브쿼리의 건수가 여러건(다중행) 일 때
					단일행 연산자인 >를 단독으로 쓸 수 없다.
					
--------------------------------------------------------------------------------

- '박지성'에게 어떤 도서를 추천 해 주면 좋을까요
- '박지성'이 구매한 도서와
	동일한 도서를 가장 많이 구매한 고객 번호 2명을 출력
	
- 박지성이 구매한 도서번호를 출력
SELECT bookid FROM
orders WHERE custid = (SELECT custid FROM customer
						WHERE name = '박지성');
--------------------------------------------------------------------------------
- 고객번호별로 위의 도서를 구매한 건수를 출력
select custid,count(custid)
from orders
where bookid in (select bookid from
orders where custid = (select custid from customer
						where name = '박지성')) 
and custid <>
(select custid from customer where name = '박지성')
group by custid
order by count(custid) desc;

CUSTID COUNT(CUSTID)
------ -------------
     2             6
     3             2
     5             1
---------------------------------------------------------------------------------
- 위의 결과에 행번호를 붙여서 상위 2개의 고객번호를 출력

SELECT custid
FROM ()
WHERE ROWNUM <= 2;

SELECT custid
FROM (select custid,count(custid)
from orders
where bookid in (select bookid from
orders where custid = (select custid from customer
						where name = '박지성')) 
and custid <>
(select custid from customer where name = '박지성')
group by custid
order by count(custid) desc
)
WHERE ROWNUM <= 2;

CUSTID
------
     2
     3
----------------------------------------------------------------------------------
-위의 고객 들이 주문한 도서번호를 출력



- 위의 결과에서 박지성이 구매한 도서목록을 빼준다.
()
MINUS
()

()
MINUS
()
*********************************************************************************
- '박지성'에게 어떤 도서를 추천 해 주면 좋을까요?
- '박지성'이 구매한 도서와 
	동일한 도서를 가장 많이 구매한 고객 번호 2명을 출력

- '박지성'이 구매한 도서번호를 출력
select bookid from 
orders where custid = (select custid from customer
						where name = '박지성');

    14     1     3     2    15
    
- 고객번호별로 위의 도서를 구매한 건수를 출력   
select custid,count(custid)
from orders 
where bookid in (select bookid from 
orders where custid = (select custid from customer
						where name = '박지성'))  
and custid <> 
(select custid from customer where name = '박지성')
group by custid
order by count(custid) desc;

CUSTID COUNT(CUSTID)
------ -------------
     2             6
     3             3
     5             1


- 위의 결과에 행번호를 붙여서 상위 2개의 고객번호를 출력

select custid 
from ()
where rownum <= 2;

select custid 
from (select custid,count(custid)
from orders 
where bookid in (select bookid from 
orders where custid = (select custid from customer
						where name = '박지성'))  
and custid <> 
(select custid from customer where name = '박지성')
group by custid
order by count(custid) desc)
where rownum <= 2;


CUSTID
------
     2
     3


- 위의 고객들이 주문한 도서번호를 출력

select bookid 
from orders 
where custid in ();


select distinct bookid 
from orders 
where custid in (select custid 
from (select custid,count(custid)
from orders 
where bookid in (select bookid from 
orders where custid = (select custid from customer
						where name = '박지성'))  
and custid <> 
(select custid from customer where name = '박지성')
group by custid
order by count(custid) desc)
where rownum <= 2);


    14     5    6    10     8    15     1     2     3

- 위의 결과에서 박지성이 구매한 도서목록를 빼 줍니다.
()
minus
()
    
(select distinct bookid 
from orders 
where custid in (select custid 
from (select custid,count(custid)
from orders 
where bookid in (select bookid from 
orders where custid = (select custid from customer
						where name = '박지성'))  
and custid <> 
(select custid from customer where name = '박지성')
group by custid
order by count(custid) desc)
where rownum <= 2))
minus
(select bookid from 
orders where custid = (select custid from customer
						where name = '박지성'));


==> 도서번호가 위의 결과에 해당하는 도서정보를 출력
select * from 
book
where bookid in ();


select * from 
book
where bookid in ((select distinct bookid 
from orders 
where custid in (select custid 
from (select custid,count(custid)
from orders 
where bookid in (select bookid from 
orders where custid = (select custid from customer
						where name = '박지성'))  
and custid <> 
(select custid from customer where name = '박지성')
group by custid
order by count(custid) desc)
where rownum <= 2))
minus
(select bookid from 
orders where custid = (select custid from customer
						where name = '박지성')));



select * from 
book
where bookid in ((select distinct bookid 
from orders 
where custid in (select custid 
from (select custid,count(custid)
from orders 
where bookid in (select bookid from 
orders where custid = (select custid from customer
						where name = '임유나'))  
and custid <> 
(select custid from customer where name = '임유나')
group by custid
order by count(custid) desc)
where rownum <= 2))
minus
(select bookid from 
orders where custid = (select custid from customer
						where name = '임유나')));

	
SQL> select * from
  2  book
  3  where bookid in ((select distinct bookid
  4  from orders
  5  where custid in (select custid
  6  from (select custid,count(custid)
  7  from orders
  8  where bookid in (select bookid from
  9  orders where custid = (select custid from customer
 10  where name = '임유나'))
 11  and custid <>
 12  (select custid from customer where name = '임유나')
 13  group by custid
 14  order by count(custid) desc)
 15  where rownum <= 2))
 16  minus
 17  (select bookid from
 18  orders where custid = (select custid from customer
 19  where name = '임유나')));

선택된 레코드가 없습니다.
==> 구매이력이 없는 사람은 추천도서가 없어요!

----------------------------------------------------------------------
다음을 참조하여  구매이력이 없는 사람에게도 추천이 되도록 sql을 작성.

()	<-- 나와 성향이 유사한 고객이 구매한 도서목록 - 내가구매한 도서목록
union
()	<-- 가장 잘팔리는 도서 2권

-----------------------------------------------------------------------




