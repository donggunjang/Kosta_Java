<<정렬하기>>
==> 값을 순서대로 오도록 배치하는 것

오름차순 정렬 : 값이 작은것 부터 순서대로 오도록 하는 것. (ASC)
내림차순 정렬 : 값이 큰것 부터  순서대로 오도록 하는 것. (DESC)

-----------------------------------------------------------------------

int []a = {17, 16, 15, 7, 9 11};

 0   1   2   3   4   5
[17][16][15][07][09][11]


for(int i=0; i<a.length; i++){
	for(int j=i+1;a.length; j++){
		if(a[i] > a[j]){
			int temp;
			temp = a[i];
			a[i] = a[j];
			a[j] = temp;
		}
	}
}

결과
 0   1   2   3   4   5
[07][09][11][15][16][17]

------------------------------------------------------------------------
<<메소드 호출>>
1. 값에 의한 호출(Call By Vaule)
	==> 메소드 호출시에 기본자료형이 전달되는 것을 말하며
		메소드 안에서 매개변수로 전달된 값이 변경되더다라도 호출한 쪽에서는 적용되지 않는다.

2. 참조에 의한 호출(Call By Reference)
	==> 메소드 호출시에 참조자료형이 전달되는 것을 말하며
	메소드 안에서 매개변수로 전달된 변수의 내용이 변경이 될 때에 호출한 쪽에서 적용이 된다.
------------------------------------------------------------------------

for(int i=0; i<tot.length; i++) {
			for(int j=i+1; j<tot.length; j++) {
				if(tot[j] > tot[i]) {
					String temp_name = name[i];
					name[i] = name[j];
					name[j] = temp_name;
					
					int temp = kor[i];
					kor[i] = kor[j];
					kor[j] = temp;
					
					temp = eng[i];
					eng[i] = eng[j];
					eng[j] = temp;
					
					temp = math[i];
					math[i] = math[j];
					math[j] = temp;
					
					temp = tot[i];
					tot[i] = tot[j];
					tot[j] = temp;
					
					double temp_avg = avg[i];
					avg[i] = avg[j];
					avg[j] = temp_avg;
				}//end if
			}//end for j
		}//end for i
		System.out.println("\t\t***성적 처리 결과***");
		System.out.println("이름\t국어\t영어\t수학\t총점\t평균");
		System.out.println("----------------------------------------------");
		for(int i=0; i<name.length; i++) {
			System.out.printf("%s\t%d\t%d\t%d\t%d\t%.2f\n",
								name[i],kor[i],eng[i],math[i],tot[i],avg[i]);
								
==> 위의 코드는 성적순으로 정렬하는 코드이다.
==> 총점을 비교하여 학생의 총점이 i번재 학생의 총점보다 더 크다면
	이름, 국어, 영어, 수학, 총점, 평균을 각각 바꿔야 한다.
	이렇게 하면 상당히 번거로운 작업이 된다.
	
==> 이와 같이 "기본자료형"으로만 프로그래밍 할 때 "불가능" 한 것은 아니지만
	정렬하고자 할 대 일일이 바꿔줘야 하는 것은 귀찮고 시간이 오래걸리고 번거로운데
	
==> 한명의 학생의 정보 (이름,국어,영어,수학,총점,평균)을 하나의 세트로 하는
	"새로운 자료형"을 만들면 보다 더 간결하게 표현 할 수 있다.

class 자료형이름{

	//세트를 이루는 구성요소(들)
	
}

class StudentInfo{
	String name;
	int kor;
	int eng;
	int math;
	int tot;
	double avg;
}			

int year;
StudentInfo data;

year = 2024;
data = new StudentInfo() ;

String name;
int kor,eng,math,tot;
double avg;

-----------------------------------------------------------------------
int[]a;
a = new int[5];                   <--- int의 변수 5개

StudentInfo []data;
data = new StudentInfo[5];		  <--- Student의 변수 5개
								  <--- Student의 변수

C++, 자바
==> 객체 지향 프로그래밍(Object Oriented Programming)
==> 현실세계의 모든 것을 개체화 할 수 있다.

객체
==> 이세상에서 유일 한것.
==> 이세상은 수 많은 객체들로 구성이 되어 있다.
==> 여기에 앉아 있는 여러분 한명한명이 모두 객체 입니다.
==> 책상에 놓여 있는 "에이스" 과자도 객체이고 
==> 책상에 놓여 있는 4색볼펜이 객체이고
==> 두개의 책상에 놓여있는 각각의 덤블러도 객체 입니다.
==> 제 책상에 놓여 있는 리모콘도, 선풍기도 모두 객체 입니다
==> 각각의 객체 그 객체를 나타내기 위한 여러가지 "속성"들로 구성되어있다.
==> 선풍이기는 날개 펜이 있고, 덮게가 있고 받침대도 있고 동작시키기 위한 버튼으로 구성되어있다.
==> 에이스 과자에서 날개 펜을 찾을 수는 없다.

-----------------------------------------------------------------------
자바언어로 "객체지향 프로그래밍을 할 때에는"
먼저, 내가 표현하고자 하는 객체에 대하여 "속성"과 "동작"을 분석합니다.
클래스를 만듭니다.
			
클래스: 객체를 만들기 위한 틀(설계도)에 해당 합니다.
-----------------------------------------------------------------------
클래스
	속성 : 맴버변수
	동작 : 맴버메소드
-----------------------------------------------------------------------
길동이가 손에 아이폰을 들고 이스백을 메고 은행에 들어간다.
	
	
	사람
			속성
					손
			동작		
					든다
					멘다
					들어간다

-----------------------------------------------------------------------
사람(person)
	속성
			이름	String name		"홍길동"
			성별 String gender 	"남자","여자"
			나이 int age 		24



-----------------------------------------------------------------------
객체지향 프로그래밍의 특징
	1) 은닉성:캡슐화(Encapsulation) : 일반적으로 외부의 다른 클래스로 부터 속성(맴버변수)를 보호하는 것을 말한다.
			접근명시자 :
				private(전용부)	:클래스 자신만 접근할 수 있다.
				public(공용부)	:외부의 어떤 클래스라도 접근할 수 있다.
				
객체지향 프로그래밍의 첫번재 특징이 은닉성에 맞춰 Person클래스를 만들면
다음과 같이 모든 속성들을 private 영역에 둔다.

private String name;
private String gender;
private int age;

위와같이 모든 속성들이 private영역에 있으면 외부의 다른 클래스에서는
직접 맴버변수에 접근할 수 없고
public에 있는 메소드를 통해서 접근할 수 있도록 만들어야 합니다.
접근하여 값을 변경시키는 동작도 필요하고 접근하여 값을 읽어 오는 동작도 필요합니다.

값을 변경하는 동작 ===> setXXX() 	setter 설정자
값은 읽어오는 동작 ===> getXXX()	getter 접근자

---------------------------------------------------------------------------
생성자(Constructor)
==> 클래스 이름과 같은 이름의 특수한 메소드를 말하며
	객체생성시에 자동수행되어 맴버변수들의 값을 초기화 할 목적으로 사용.
	
==> 일반 메소드는 호출문에 의해 동작하지만
	생성자는 객체생성시에 자동 수행되기 때문에 return의 개념이 없다.
	
	따라서 생성자 앞에는
	일반메소드 처럼 return type을 쓰지 않는다.
	(void 라고 쓰면 안된다.)