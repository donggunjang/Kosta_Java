프로세서
	==> 실행중인 프로그램 말한다.
	
멀티프로세서
	==> 동시에 여러프로그램이 실행되는 것을 말한다.
	
------------------------------------------------------------------------------------
쓰레드
	==> 프로그램 안에서 실행중인 메소드를 말한다.

멀티 쓰레드
	==> 프로그램 안에서 여러개의 메소드가 동시 다발로 동작 하는 것을 말한다.
	
---------------------------------------------------------------------------------

자바에서는 멀티쓰레드 프로그래밍을 위하여
Thread 클래스와 Runnable 인터페이스를 이용할 수 있다.

쓰레드가 해야 하는 일은 
run() 메소드를 오버라이딩해서 그 안에 써주고

쓰레드를 동작시키기 위해서는
start()메소드를 호출한다.

오류는 안나지만
멀티 쓰레드가 프로그래밍 코드 동작하지 않는다
순서대로 동작한다.


---------------------------------------------------------------------------------
class Hello implements Runnable{
	public void run(){
		.....
	}
}

Hello h = new Hello();
(new Thread(h)).start();

==> Runnable 인터페이스를 구현한 객체는 직접 start를 호출 할 수 없어
		Thread를 통해 호출해준다.
		
---------------------------------------------------------------------------------

<< 쓰레드의 우선순위 설정 >>
필요하다면 쓰레드의 우선순위를 설정 할수 있어요.
가급적 다른것 들 보다 더 빨리 작업을 완료해주라고 요청하는 것이지
요청했다고 해서 반드시 더 빨리 작업이 완료되는것이 보장 되지는 않는다.

setPriority(newPriority);

newPriority의 범위
1					~		10
Thread.MIN_PRIORITY 	Thread.MAX_PRIORITY

---------------------------------------------------------------------------------
a = new Person("홍길동")
b = new Person("김유신")

b.setPriority(Thread.MAX_PRIORITY)

---------------------------------------------------------------------------------
<< 임계영역 (Critical Section)>>

두개 이상의 쓰레드가 자원을 고유할 때에
한번에 하나의 쓰레드에게만 접근을 허용하는 영역을 말하며
자바에서는 그러한 동작을 하는 메소드 이름 앞에 혹은
그러한 기능을 하는 블럭{} 앞에
synchronized 키워드를 붙이면 자동으로 임계영역이 되면
한번에 하나의 쓰레드에게만 접근을 허용하게 됩니다.

---------------------------------------------------------------------------------
쓰레드를 가동 시키면
가능하면 동시다발로 공평하게 실행이 되게끔 스케줄링을 해 줍니다.
만약 두개의 객체가 반드시 
1대 1로 동작 하도록 하려면 쓰레드 사이의
통신을 이용할 수 있습니다.

---------------------------------------------------------------------------------

<< 쓰레드 사이의 통신 >>

두개의 쓰레드가 반드시 1:1로 동작하도록 하려면 
쓰레드 사이의 통신이 필요합니다.

내가 작업을 하고 있는 동안에는 너는 기다려.
내가 작업이 끝났으니 너는 일을 해.
와 같이 쓰레드 사이의 통신을 이용하면
1:1로 동작하도록 만들 수 있습니다.

예를들어 "생산자와 소비자"가 있다고 할 때
새로운 제품이 생산되어야지만 소비가 일어나고
소비가 일어나야지만 새로운 제품을 생산하는 경우에는
둘 사이에 생산이 되었는지 소비가 되었는지 서로 통신이 필요합니다.
생산자는 소비가 일어날 때 까지 기다렸다가 소비가 되면 새로운 제품을 생산하고
소비자는 생산이 일어날 때 까지 기다렸다가 새로운 제품이 생산되면 소비가 일어나도록
반드시 1:1로 동작하도록 할 수 있습니다.

자바에서는 
이러한 쓰레드 사이의 통신을 위하여
조상클래스인 Object의 wait 와 notify 메소드를 이용합니다.

내가 상대방이 일이 완료될 때 까지 기다리기 위해서는 wait 메소드를 이용하고
일이 끝나서 상대방을 깨울 때는 notify 메소드를 이용 합니다.

----------------------------------------------------------------------------------
CUI: Characeter User Interface
	=> 사용자와 컴퓨터가 문자로 의사소통 하는 환경
GUI: Graphic User Interface
	=> 사용자와 컴퓨터가 그래픽요소로 의사소통 하는 것
	
자바는 GUI를 위하여 (awt)패키지와 (swing)패키지를 만들어 두었습니다.

JFrame
JButton
JTextFeiled
JTextArea
JLabel

-----------------------------------------------------------------------------------
배치관리자(LayoutManger)
	화면구성요소들을 배치하는 관리자
	
-FlowLayout
	==> 화면구성 요소들을 왼쪽에서 오른쪽으로 
		위에서 아래로 물 흐르듯이 배치하는 관리자 입니다.

-GridLayout
	==> 화면을 행열로 분할 하여 배치하는 관리자 입니다.
	
-BorderLayout
	==> 화면을 동,서,남,북,가운데 5개의 영역으로 분할하여 배치하는 방식 입니다.
	==> 보통 5개의 영역에 모두 배치하기 보다는
		가운데를 중심으로 하여 중요한 컨텐츠를 가운데에 놓고 부가적인 버튼들을
		위,아래,왼쪽,오른쪽 으로 배치하여 사용합니다.
		즉, 위,아래,왼쪽,오른쪽은 생략하여 사용하고
		가운데는 생략하지 않는 것이 일반적이다.
		
-----------------------------------------------------------------------------------

- 오늘 학습내용 (임계영역, 쓰레드사이의 통신, 레이아웃 매니저, 버튼의 이벤트 처리, 서브컨테이너를 이용한 배치)에
	대하여 요약 및 정리. 
		
