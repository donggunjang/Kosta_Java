---------------------------------------------------------------------------------
public class Person {
	private String name;
	public Person(String name) {
		this.name = name;
	}
	
	public void sayHello() {
		for(int i=1; i<=10; i++) {
			System.out.println("hello,"+name+"==>"+i);
			
			try {
				Thread.sleep(100);
			} catch (InterruptedException e) {
				System.out.println(e.getMessage());
			}
		}
	}
}

public class PersonTest {

	public static void main(String[] args) {
		Person kim = new Person("김유신");
		Person lee = new Person("이순신");
		kim.sayHello();
		lee.sayHello();
		
	}
}

hello,김유신==>1				hello,이순신==>1
hello,김유신==>2				hello,이순신==>1
hello,김유신==>3				hello,이순신==>1
hello,김유신==>4				hello,이순신==>1
hello,김유신==>5	 -next->    hello,이순신==>1
hello,김유신==>6				hello,이순신==>1
hello,김유신==>7				hello,이순신==>1
hello,김유신==>8				hello,이순신==>1
hello,김유신==>9				hello,이순신==>1
hello,김유신==>10				hello,이순신==>10

------------------------------------------------------------------------------------------

메소드를 호출하면
호출한 순서대로 동작합니다.
객체 lee에 입장에서는 kim의 sayHello()가 모두 끝나야 자신에게 
기회가 온다. 만약 kim이 sayHello()에서 문제가 생기면 lee는 동작을 
안할 수가 있다. 둘이 공평하게 작업을 수행하도록 하러면 "멀티 쓰레드 프로그래밍"으로 가능함.


만약 kim과 lee가 가능하면
공평하게 작업을 수행하도록 하려면
"멀티쓰레드 프로그래밍"을 사용할 수 있다.

자바에서는 멀티쓰레드 프로그래밍을 위하여 
Thread 클래스와 Runnable 인터페이스를 이용한다.

Thread 클래스를 상속하거나 Runnable 인터페이스를 구현하거나
고평하게 동작시키고자 하는 일을(즉, 쓰레드가 해야할 일은)
run 메소드를 오버라이딩 해서 그 안에 써 준다.

그리고
쓰레드를 가동 시키기 위해서는
start() 메소드를 호출합니다.

만약 start()메소드를 호출하지 않고
직접 run()을 호출하면 오류는 나지 않지만
공평하게 스케줄링은 되지 않고 일반 메소드 처럼 동작한다.
즉, 먼저 호출한 객체가 작업이 완료되고 다음의 객체에게 기회가 온다.
그래서 쓰레드를 가동시키려면 run()을 호출하는 것이 아니라 start()를 호출해야 한다.

또, Runnable 인터페이스를 구현한 경우에는
Runnable 인터페이스는 쓰레드를 가동시키기 위한 start()매소드가 없기 때문에
Thread 객체로 포장한 후 start()를 호출해야 한다.


package com.kosta.game5;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import javax.swing.JPanel;

public class MyPanel extends JPanel implements KeyListener {
	//사용자, 적, 미사일 맴버로 초기화
	Enermy enermy;
	Player player;
	Missile missile;
	public MyPanel() {
		super();
		this.addKeyListener(this);
		//키보드 이벤트를 바로 설정 할 수 없어서
		//패널에 키보드 이벤트를 설정하기 위해
		//포커스를 설정
		this.requestFocus();
		setFocusable(true);
		
		//화면에 보여줄 사용자, 적, 미사일의 객체들을 생성
		enermy = new Enermy("enermy.png");
		player = new Player("player.png");
		missile = new Missile("missile.png");
		//사용자, 적, 미사일이 다들 동시다발적으로 움직이게 하기 위하여 해서 쓰레드를 만들어준다.
		//쓰레드클래스를 만든다.
		//다른곳에서는 쓰이지 않기 때문에 MyPanel 안에 Inner클래스로 만든다.
		class MyThread extends Thread{
			public void run() {
				while(true) {
					//각각의 그래픽오브젝트의 위치를 갱신.
					setBackground(Color.black);
					enermy.update();
					player.update();
					missile.update();
					//갱신된 위치에 다시 그려줄 것을 요청
					repaint();
					try {
						//0.05초 동안 대기시간을 준다.
						Thread.sleep(50);
					}catch( InterruptedException e) {}
				}//end while()
			}//end run()
		}// end MyThread
		//쓰레드 객체 생성
		MyThread t = new MyThread();
		t.start();
	}
	public void paint(Graphics g) {
		super.paint(g);
		enermy.draw(g);
		player.draw(g);
		missile.draw(g);
	}
	@Override
	public void keyTyped(KeyEvent e) {
		
	}
	@Override
	public void keyReleased(KeyEvent e) {
		
	}
	@Override
	public void keyPressed(KeyEvent event) {
		player.KeyPressed(event);
		missile.KeyPressed(event, player.x, player.y);
		
	}
	
}
